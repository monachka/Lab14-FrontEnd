{"ast":null,"code":"import _defineProperty from \"/home/mnck/MNCK/Programmes/Semestre5/DevAppN-T/appli_codes/Repos/Lab14/carfront/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/home/mnck/MNCK/Programmes/Semestre5/DevAppN-T/appli_codes/Repos/Lab14/carfront/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"id\"],\n  _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector, gridVisibleColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nvar missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#server-side-persistence.'], 'error');\nexport var useGridRowEditing = function useGridRowEditing(apiRef, props) {\n  var _React$useState = React.useState({}),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    rowModesModel = _React$useState2[0],\n    setRowModesModel = _React$useState2[1];\n  var rowModesModelRef = React.useRef(rowModesModel);\n  var prevRowModesModel = React.useRef({});\n  var focusTimeout = React.useRef(null);\n  var nextFocusedCell = React.useRef(null);\n  var processRowUpdate = props.processRowUpdate,\n    onProcessRowUpdateError = props.onProcessRowUpdateError,\n    rowModesModelProp = props.rowModesModel,\n    onRowModesModelChange = props.onRowModesModelChange;\n  var runIfEditModeIsRow = function runIfEditModeIsRow(callback) {\n    return function () {\n      if (props.editMode === GridEditModes.Row) {\n        callback.apply(void 0, arguments);\n      }\n    };\n  };\n  var throwIfNotEditable = React.useCallback(function (id, field) {\n    var params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(\"MUI: The cell with id=\".concat(id, \" and field=\").concat(field, \" is not editable.\"));\n    }\n  }, [apiRef]);\n  var throwIfNotInMode = React.useCallback(function (id, mode) {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(\"MUI: The row with id=\".concat(id, \" is not in \").concat(mode, \" mode.\"));\n    }\n  }, [apiRef]);\n  var handleCellDoubleClick = React.useCallback(function (params, event) {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n    var rowParams = apiRef.current.getRowParams(params.id);\n    var newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  var handleCellFocusIn = React.useCallback(function (params) {\n    nextFocusedCell.current = params;\n  }, []);\n  var handleCellFocusOut = React.useCallback(function (params, event) {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    }\n    // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(function () {\n      var _nextFocusedCell$curr;\n      focusTimeout.current = null;\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        }\n\n        // The row may already changed its mode\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n        var rowParams = apiRef.current.getRowParams(params.id);\n        var newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(function () {\n    return function () {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  var handleCellKeyDown = React.useCallback(function (params, event) {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n      var reason;\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        var columnFields = gridVisibleColumnFieldsSelector(apiRef).filter(function (field) {\n          var column = apiRef.current.getColumn(field);\n          if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n            return true;\n          }\n          return apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field));\n        });\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        // Always prevent going to the next element in the tab sequence because the focus is\n        // handled manually to support edit components rendered inside Portals\n        event.preventDefault();\n        if (!reason) {\n          var index = columnFields.findIndex(function (field) {\n            return field === params.field;\n          });\n          var nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];\n          apiRef.current.setCellFocus(params.id, nextFieldToFocus);\n        }\n      }\n      if (reason) {\n        var newParams = _extends({}, apiRef.current.getRowParams(params.id), {\n          reason: reason,\n          field: params.field\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      var _reason;\n      var canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event: event,\n        cellParams: params,\n        editMode: 'row'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if (isPrintableKey(event)) {\n        _reason = GridRowEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        _reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        _reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        _reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n      if (_reason) {\n        var rowParams = apiRef.current.getRowParams(params.id);\n        var _newParams = _extends({}, rowParams, {\n          field: params.field,\n          key: event.key,\n          reason: _reason\n        });\n        apiRef.current.publishEvent('rowEditStart', _newParams, event);\n      }\n    }\n  }, [apiRef]);\n  var handleRowEditStart = React.useCallback(function (params) {\n    var id = params.id,\n      field = params.field,\n      reason = params.reason,\n      key = params.key,\n      columns = params.columns;\n    var startRowEditModeParams = {\n      id: id,\n      fieldToFocus: field\n    };\n    if (reason === GridRowEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('17')) {\n        // In React 17, cleaning the input is enough.\n        // The sequence of events makes the key pressed by the end-users update the textbox directly.\n        startRowEditModeParams.deleteValue = !!field;\n      } else {\n        var colDef = columns.find(function (col) {\n          return col.field === field;\n        });\n        startRowEditModeParams.initialValue = colDef.valueParser ? colDef.valueParser(key) : key;\n      }\n    } else if (reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  var handleRowEditStop = React.useCallback(function (params) {\n    var id = params.id,\n      reason = params.reason,\n      field = params.field;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    var cellToFocusAfter;\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    var ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopRowEditMode({\n      id: id,\n      ignoreModifications: ignoreModifications,\n      field: field,\n      cellToFocusAfter: cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  var getRowMode = React.useCallback(function (id) {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  var updateRowModesModel = useEventCallback(function (newModel) {\n    var isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      onRowModesModelChange(newModel, {});\n    }\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  var updateRowInRowModesModel = React.useCallback(function (id, newProps) {\n    var newModel = _extends({}, rowModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  var updateOrDeleteRowState = React.useCallback(function (id, newProps) {\n    apiRef.current.setState(function (state) {\n      var newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  var updateOrDeleteFieldState = React.useCallback(function (id, field, newProps) {\n    apiRef.current.setState(function (state) {\n      var newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], _defineProperty({}, field, _extends({}, newProps)));\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  var startRowEditMode = React.useCallback(function (params) {\n    var id = params.id,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  var updateStateToStartRowEditMode = useEventCallback(function (params) {\n    var id = params.id,\n      fieldToFocus = params.fieldToFocus,\n      deleteValue = params.deleteValue,\n      initialValue = params.initialValue;\n    var columnFields = gridColumnFieldsSelector(apiRef);\n    var newProps = columnFields.reduce(function (acc, field) {\n      var cellParams = apiRef.current.getCellParams(id, field);\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n      var newValue = apiRef.current.getCellValue(id, field);\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      var unstable_updateValueOnRender = false;\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        newValue = deleteValue ? '' : initialValue;\n        unstable_updateValueOnRender = true;\n      }\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: false,\n        unstable_updateValueOnRender: unstable_updateValueOnRender\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  });\n  var stopRowEditMode = React.useCallback(function (params) {\n    var id = params.id,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  var updateStateToStopRowEditMode = useEventCallback(function (params) {\n    var id = params.id,\n      ignoreModifications = params.ignoreModifications,\n      focusedField = params.field,\n      _params$cellToFocusAf = params.cellToFocusAfter,\n      cellToFocusAfter = _params$cellToFocusAf === void 0 ? 'none' : _params$cellToFocusAf;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    var finishRowEditMode = function finishRowEditMode() {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var row = apiRef.current.getRow(id);\n    var isSomeFieldProcessingProps = Object.values(editingState[id]).some(function (fieldProps) {\n      return fieldProps.isProcessingProps;\n    });\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n    var hasSomeFieldWithError = Object.values(editingState[id]).some(function (fieldProps) {\n      return fieldProps.error;\n    });\n    if (hasSomeFieldWithError) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      // Revert the mode in the rowModesModel prop back to \"edit\"\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n    var rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);\n    if (processRowUpdate) {\n      var handleError = function handleError(errorThrown) {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit;\n        // Revert the mode in the rowModesModel prop back to \"edit\"\n        updateRowInRowModesModel(id, {\n          mode: GridRowModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(function (finalRowUpdate) {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  var setRowEditingEditCellValue = React.useCallback(function (params) {\n    var id = params.id,\n      field = params.field,\n      value = params.value,\n      debounceMs = params.debounceMs,\n      skipValueParser = params.unstable_skipValueParser;\n    throwIfNotEditable(id, field);\n    var column = apiRef.current.getColumn(field);\n    var row = apiRef.current.getRow(id);\n    var parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n    return new Promise(function (resolve) {\n      var promises = [];\n      if (column.preProcessEditCellProps) {\n        var hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n        var _editingState$id = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n        var promise = Promise.resolve(column.preProcessEditCellProps({\n          id: id,\n          row: row,\n          props: newProps,\n          hasChanged: hasChanged,\n          otherFieldsProps: otherFieldsProps\n        })).then(function (processedProps) {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n      Object.entries(editingState[id]).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n          thisField = _ref2[0],\n          fieldProps = _ref2[1];\n        if (thisField === field) {\n          return;\n        }\n        var fieldColumn = apiRef.current.getColumn(thisField);\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n        var _editingState$id2 = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n        var promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id: id,\n          row: row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps: otherFieldsProps\n        })).then(function (processedProps) {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(function () {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  var getRowWithUpdatedValuesFromRowEditing = React.useCallback(function (id) {\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var row = apiRef.current.getRow(id);\n    if (!editingState[id]) {\n      return apiRef.current.getRow(id);\n    }\n    var rowUpdate = _extends({}, row);\n    Object.entries(editingState[id]).forEach(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        field = _ref4[0],\n        fieldProps = _ref4[1];\n      var column = apiRef.current.getColumn(field);\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  var editingApi = {\n    getRowMode: getRowMode,\n    startRowEditMode: startRowEditMode,\n    stopRowEditMode: stopRowEditMode\n  };\n  var editingPrivateApi = {\n    setRowEditingEditCellValue: setRowEditingEditCellValue,\n    getRowWithUpdatedValuesFromRowEditing: getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(function () {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n  React.useEffect(function () {\n    var idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopRowEditMode may change it later\n    var copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(rowModesModel).forEach(function (_ref5) {\n      var _ref6 = _slicedToArray(_ref5, 2),\n        id = _ref6[0],\n        params = _ref6[1];\n      var _copyOfPrevRowModesMo, _idToIdLookup$id;\n      var prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;\n      var originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};","map":{"version":3,"names":["_toPropertyKey","_objectWithoutPropertiesLoose","_extends","_excluded","_excluded2","React","unstable_useEventCallback","useEventCallback","useGridApiEventHandler","useGridApiOptionHandler","GridEditModes","GridRowModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","gridColumnFieldsSelector","gridVisibleColumnFieldsSelector","buildWarning","gridRowsDataRowIdToIdLookupSelector","deepClone","GridRowEditStopReasons","GridRowEditStartReasons","GRID_ACTIONS_COLUMN_TYPE","missingOnProcessRowUpdateErrorWarning","useGridRowEditing","apiRef","props","_React$useState","useState","_React$useState2","_slicedToArray","rowModesModel","setRowModesModel","rowModesModelRef","useRef","prevRowModesModel","focusTimeout","nextFocusedCell","processRowUpdate","onProcessRowUpdateError","rowModesModelProp","onRowModesModelChange","runIfEditModeIsRow","callback","editMode","Row","apply","arguments","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","concat","throwIfNotInMode","mode","getRowMode","handleCellDoubleClick","event","isEditable","Edit","rowParams","getRowParams","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusIn","handleCellFocusOut","View","setTimeout","_nextFocusedCell$curr","getRow","rowFocusOut","useEffect","clearTimeout","handleCellKeyDown","cellMode","which","key","escapeKeyDown","enterKeyDown","columnFields","filter","column","getColumn","type","shiftKey","shiftTabKeyDown","length","tabKeyDown","preventDefault","index","findIndex","nextFieldToFocus","setCellFocus","canStartEditing","unstable_applyPipeProcessors","cellParams","printableKeyDown","ctrlKey","metaKey","deleteKeyDown","handleRowEditStart","columns","startRowEditModeParams","fieldToFocus","version","startsWith","deleteValue","colDef","find","col","initialValue","valueParser","startRowEditMode","handleRowEditStop","runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","stopRowEditMode","onRowEditStart","onRowEditStop","Cell","editingState","state","isEditing","Object","keys","updateRowModesModel","newModel","isNewModelDifferentFromProp","updateRowInRowModesModel","newProps","updateOrDeleteRowState","setState","newEditingState","editRows","forceUpdate","updateOrDeleteFieldState","_defineProperty","other","updateStateToStartRowEditMode","reduce","acc","newValue","getCellValue","unstable_updateValueOnRender","value","error","isProcessingProps","updateStateToStopRowEditMode","focusedField","_params$cellToFocusAf","finishRowEditMode","moveFocusToRelativeCell","row","isSomeFieldProcessingProps","values","some","fieldProps","hasSomeFieldWithError","rowUpdate","getRowWithUpdatedValuesFromRowEditing","handleError","errorThrown","Promise","resolve","then","finalRowUpdate","updateRows","catch","setRowEditingEditCellValue","debounceMs","skipValueParser","unstable_skipValueParser","parsedValue","changeReason","preProcessEditCellProps","promises","hasChanged","_editingState$id","otherFieldsProps","map","promise","processedProps","push","entries","forEach","_ref","_ref2","thisField","fieldColumn","_editingState$id2","all","_ref3","_ref4","valueSetter","editingApi","editingPrivateApi","idToIdLookup","copyOfPrevRowModesModel","_ref5","_ref6","_copyOfPrevRowModesMo","_idToIdLookup$id","prevMode","originalId"],"sources":["/home/mnck/MNCK/Programmes/Semestre5/DevAppN-T/appli_codes/Repos/Lab14/carfront/node_modules/@mui/x-data-grid/hooks/features/editing/useGridRowEditing.js"],"sourcesContent":["import _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\"],\n  _excluded2 = [\"id\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridRowModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { gridColumnFieldsSelector, gridVisibleColumnFieldsSelector } from '../columns/gridColumnsSelector';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridRowEditStopReasons, GridRowEditStartReasons } from '../../../models/params/gridRowParams';\nimport { GRID_ACTIONS_COLUMN_TYPE } from '../../../colDef';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#server-side-persistence.'], 'error');\nexport const useGridRowEditing = (apiRef, props) => {\n  const [rowModesModel, setRowModesModel] = React.useState({});\n  const rowModesModelRef = React.useRef(rowModesModel);\n  const prevRowModesModel = React.useRef({});\n  const focusTimeout = React.useRef(null);\n  const nextFocusedCell = React.useRef(null);\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    rowModesModel: rowModesModelProp,\n    onRowModesModelChange\n  } = props;\n  const runIfEditModeIsRow = callback => (...args) => {\n    if (props.editMode === GridEditModes.Row) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, mode) => {\n    if (apiRef.current.getRowMode(id) !== mode) {\n      throw new Error(`MUI: The row with id=${id} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.Edit) {\n      return;\n    }\n    const rowParams = apiRef.current.getRowParams(params.id);\n    const newParams = _extends({}, rowParams, {\n      field: params.field,\n      reason: GridRowEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('rowEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusIn = React.useCallback(params => {\n    nextFocusedCell.current = params;\n  }, []);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n      return;\n    }\n    // The mechanism to detect if we can stop editing a row is different from\n    // the cell editing. Instead of triggering it when clicking outside a cell,\n    // we must check if another cell in the same row was not clicked. To achieve\n    // that, first we keep track of all cells that gained focus. When a cell loses\n    // focus we check if the next cell that received focus is from a different row.\n    nextFocusedCell.current = null;\n    focusTimeout.current = setTimeout(() => {\n      var _nextFocusedCell$curr;\n      focusTimeout.current = null;\n      if (((_nextFocusedCell$curr = nextFocusedCell.current) == null ? void 0 : _nextFocusedCell$curr.id) !== params.id) {\n        // The row might have been deleted during the click\n        if (!apiRef.current.getRow(params.id)) {\n          return;\n        }\n\n        // The row may already changed its mode\n        if (apiRef.current.getRowMode(params.id) === GridRowModes.View) {\n          return;\n        }\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          reason: GridRowEditStopReasons.rowFocusOut\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    });\n  }, [apiRef]);\n  React.useEffect(() => {\n    return () => {\n      clearTimeout(focusTimeout.current);\n    };\n  }, []);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridRowModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridRowEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        const columnFields = gridVisibleColumnFieldsSelector(apiRef).filter(field => {\n          const column = apiRef.current.getColumn(field);\n          if (column.type === GRID_ACTIONS_COLUMN_TYPE) {\n            return true;\n          }\n          return apiRef.current.isCellEditable(apiRef.current.getCellParams(params.id, field));\n        });\n        if (event.shiftKey) {\n          if (params.field === columnFields[0]) {\n            // Exit if user pressed Shift+Tab on the first field\n            reason = GridRowEditStopReasons.shiftTabKeyDown;\n          }\n        } else if (params.field === columnFields[columnFields.length - 1]) {\n          // Exit if user pressed Tab on the last field\n          reason = GridRowEditStopReasons.tabKeyDown;\n        }\n\n        // Always prevent going to the next element in the tab sequence because the focus is\n        // handled manually to support edit components rendered inside Portals\n        event.preventDefault();\n        if (!reason) {\n          const index = columnFields.findIndex(field => field === params.field);\n          const nextFieldToFocus = columnFields[event.shiftKey ? index - 1 : index + 1];\n          apiRef.current.setCellFocus(params.id, nextFieldToFocus);\n        }\n      }\n      if (reason) {\n        const newParams = _extends({}, apiRef.current.getRowParams(params.id), {\n          reason,\n          field: params.field\n        });\n        apiRef.current.publishEvent('rowEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'row'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if (isPrintableKey(event)) {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridRowEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridRowEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridRowEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const rowParams = apiRef.current.getRowParams(params.id);\n        const newParams = _extends({}, rowParams, {\n          field: params.field,\n          key: event.key,\n          reason\n        });\n        apiRef.current.publishEvent('rowEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleRowEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason,\n      key,\n      columns\n    } = params;\n    const startRowEditModeParams = {\n      id,\n      fieldToFocus: field\n    };\n    if (reason === GridRowEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('17')) {\n        // In React 17, cleaning the input is enough.\n        // The sequence of events makes the key pressed by the end-users update the textbox directly.\n        startRowEditModeParams.deleteValue = !!field;\n      } else {\n        const colDef = columns.find(col => col.field === field);\n        startRowEditModeParams.initialValue = colDef.valueParser ? colDef.valueParser(key) : key;\n      }\n    } else if (reason === GridRowEditStartReasons.deleteKeyDown) {\n      startRowEditModeParams.deleteValue = !!field;\n    }\n    apiRef.current.startRowEditMode(startRowEditModeParams);\n  }, [apiRef]);\n  const handleRowEditStop = React.useCallback(params => {\n    const {\n      id,\n      reason,\n      field\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    let cellToFocusAfter;\n    if (reason === GridRowEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridRowEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridRowEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopRowEditMode({\n      id,\n      ignoreModifications,\n      field,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsRow(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusIn', runIfEditModeIsRow(handleCellFocusIn));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsRow(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsRow(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'rowEditStart', runIfEditModeIsRow(handleRowEditStart));\n  useGridApiEventHandler(apiRef, 'rowEditStop', runIfEditModeIsRow(handleRowEditStop));\n  useGridApiOptionHandler(apiRef, 'rowEditStart', props.onRowEditStart);\n  useGridApiOptionHandler(apiRef, 'rowEditStop', props.onRowEditStop);\n  const getRowMode = React.useCallback(id => {\n    if (props.editMode === GridEditModes.Cell) {\n      return GridRowModes.View;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && Object.keys(editingState[id]).length > 0;\n    return isEditing ? GridRowModes.Edit : GridRowModes.View;\n  }, [apiRef, props.editMode]);\n  const updateRowModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.rowModesModel;\n    if (onRowModesModelChange && isNewModelDifferentFromProp) {\n      onRowModesModelChange(newModel, {});\n    }\n    if (props.rowModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setRowModesModel(newModel);\n    rowModesModelRef.current = newModel;\n    apiRef.current.publishEvent('rowModesModelChange', newModel);\n  });\n  const updateRowInRowModesModel = React.useCallback((id, newProps) => {\n    const newModel = _extends({}, rowModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newProps);\n    } else {\n      delete newModel[id];\n    }\n    updateRowModesModel(newModel);\n  }, [updateRowModesModel]);\n  const updateOrDeleteRowState = React.useCallback((id, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = newProps;\n      } else {\n        delete newEditingState[id];\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotInMode(id, GridRowModes.View);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.Edit\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStartRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      fieldToFocus,\n      deleteValue,\n      initialValue\n    } = params;\n    const columnFields = gridColumnFieldsSelector(apiRef);\n    const newProps = columnFields.reduce((acc, field) => {\n      const cellParams = apiRef.current.getCellParams(id, field);\n      if (!cellParams.isEditable) {\n        return acc;\n      }\n      let newValue = apiRef.current.getCellValue(id, field);\n      // eslint-disable-next-line @typescript-eslint/naming-convention\n      let unstable_updateValueOnRender = false;\n      if (fieldToFocus === field && (deleteValue || initialValue)) {\n        newValue = deleteValue ? '' : initialValue;\n        unstable_updateValueOnRender = true;\n      }\n      acc[field] = {\n        value: newValue,\n        error: false,\n        isProcessingProps: false,\n        unstable_updateValueOnRender\n      };\n      return acc;\n    }, {});\n    updateOrDeleteRowState(id, newProps);\n    if (fieldToFocus) {\n      apiRef.current.setCellFocus(id, fieldToFocus);\n    }\n  });\n  const stopRowEditMode = React.useCallback(params => {\n    const {\n        id\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, GridRowModes.Edit);\n    updateRowInRowModesModel(id, _extends({\n      mode: GridRowModes.View\n    }, other));\n  }, [throwIfNotInMode, updateRowInRowModesModel]);\n  const updateStateToStopRowEditMode = useEventCallback(params => {\n    const {\n      id,\n      ignoreModifications,\n      field: focusedField,\n      cellToFocusAfter = 'none'\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id);\n    const finishRowEditMode = () => {\n      if (cellToFocusAfter !== 'none' && focusedField) {\n        apiRef.current.moveFocusToRelativeCell(id, focusedField, cellToFocusAfter);\n      }\n      updateOrDeleteRowState(id, null);\n      updateRowInRowModesModel(id, null);\n    };\n    if (ignoreModifications) {\n      finishRowEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    const isSomeFieldProcessingProps = Object.values(editingState[id]).some(fieldProps => fieldProps.isProcessingProps);\n    if (isSomeFieldProcessingProps) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      return;\n    }\n    const hasSomeFieldWithError = Object.values(editingState[id]).some(fieldProps => fieldProps.error);\n    if (hasSomeFieldWithError) {\n      prevRowModesModel.current[id].mode = GridRowModes.Edit;\n      // Revert the mode in the rowModesModel prop back to \"edit\"\n      updateRowInRowModesModel(id, {\n        mode: GridRowModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromRowEditing(id);\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevRowModesModel.current[id].mode = GridRowModes.Edit;\n        // Revert the mode in the rowModesModel prop back to \"edit\"\n        updateRowInRowModesModel(id, {\n          mode: GridRowModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n      try {\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishRowEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishRowEditMode();\n    }\n  });\n  const setRowEditingEditCellValue = React.useCallback(params => {\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (!column.preProcessEditCellProps) {\n      updateOrDeleteFieldState(id, field, newProps);\n    }\n    return new Promise(resolve => {\n      const promises = [];\n      if (column.preProcessEditCellProps) {\n        const hasChanged = newProps.value !== editingState[id][field].value;\n        newProps = _extends({}, newProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, field, newProps);\n        const _editingState$id = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id, [field].map(_toPropertyKey));\n        const promise = Promise.resolve(column.preProcessEditCellProps({\n          id,\n          row,\n          props: newProps,\n          hasChanged,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          // We don't reuse the value from the props pre-processing because when the\n          // promise resolves it may be already outdated. The only exception to this rule\n          // is when there's no pre-processing.\n          processedProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n          updateOrDeleteFieldState(id, field, processedProps);\n        });\n        promises.push(promise);\n      }\n      Object.entries(editingState[id]).forEach(([thisField, fieldProps]) => {\n        if (thisField === field) {\n          return;\n        }\n        const fieldColumn = apiRef.current.getColumn(thisField);\n        if (!fieldColumn.preProcessEditCellProps) {\n          return;\n        }\n        fieldProps = _extends({}, fieldProps, {\n          isProcessingProps: true\n        });\n        updateOrDeleteFieldState(id, thisField, fieldProps);\n        editingState = gridEditRowsStateSelector(apiRef.current.state);\n        const _editingState$id2 = editingState[id],\n          otherFieldsProps = _objectWithoutPropertiesLoose(_editingState$id2, [thisField].map(_toPropertyKey));\n        const promise = Promise.resolve(fieldColumn.preProcessEditCellProps({\n          id,\n          row,\n          props: fieldProps,\n          hasChanged: false,\n          otherFieldsProps\n        })).then(processedProps => {\n          // Check again if the row is in edit mode because the user may have\n          // discarded the changes while the props were being processed.\n          if (apiRef.current.getRowMode(id) === GridRowModes.View) {\n            resolve(false);\n            return;\n          }\n          processedProps = _extends({}, processedProps, {\n            isProcessingProps: false\n          });\n          updateOrDeleteFieldState(id, thisField, processedProps);\n        });\n        promises.push(promise);\n      });\n      Promise.all(promises).then(() => {\n        if (apiRef.current.getRowMode(id) === GridRowModes.Edit) {\n          editingState = gridEditRowsStateSelector(apiRef.current.state);\n          resolve(!editingState[id][field].error);\n        } else {\n          resolve(false);\n        }\n      });\n    });\n  }, [apiRef, throwIfNotEditable, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromRowEditing = React.useCallback(id => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id]) {\n      return apiRef.current.getRow(id);\n    }\n    let rowUpdate = _extends({}, row);\n    Object.entries(editingState[id]).forEach(([field, fieldProps]) => {\n      const column = apiRef.current.getColumn(field);\n      if (column.valueSetter) {\n        rowUpdate = column.valueSetter({\n          value: fieldProps.value,\n          row: rowUpdate\n        });\n      } else {\n        rowUpdate[field] = fieldProps.value;\n      }\n    });\n    return rowUpdate;\n  }, [apiRef]);\n  const editingApi = {\n    getRowMode,\n    startRowEditMode,\n    stopRowEditMode\n  };\n  const editingPrivateApi = {\n    setRowEditingEditCellValue,\n    getRowWithUpdatedValuesFromRowEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (rowModesModelProp) {\n      updateRowModesModel(rowModesModelProp);\n    }\n  }, [rowModesModelProp, updateRowModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopRowEditMode may change it later\n    const copyOfPrevRowModesModel = prevRowModesModel.current;\n    prevRowModesModel.current = deepClone(rowModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(rowModesModel).forEach(([id, params]) => {\n      var _copyOfPrevRowModesMo, _idToIdLookup$id;\n      const prevMode = ((_copyOfPrevRowModesMo = copyOfPrevRowModesModel[id]) == null ? void 0 : _copyOfPrevRowModesMo.mode) || GridRowModes.View;\n      const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n      if (params.mode === GridRowModes.Edit && prevMode === GridRowModes.View) {\n        updateStateToStartRowEditMode(_extends({\n          id: originalId\n        }, params));\n      } else if (params.mode === GridRowModes.View && prevMode === GridRowModes.Edit) {\n        updateStateToStopRowEditMode(_extends({\n          id: originalId\n        }, params));\n      }\n    });\n  }, [apiRef, rowModesModel, updateStateToStartRowEditMode, updateStateToStopRowEditMode]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}