{"ast":null,"code":"import _regeneratorRuntime from \"/home/mnck/MNCK/Programmes/Semestre5/DevAppN-T/appli_codes/Repos/Lab14/carfront/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/home/mnck/MNCK/Programmes/Semestre5/DevAppN-T/appli_codes/Repos/Lab14/carfront/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"/home/mnck/MNCK/Programmes/Semestre5/DevAppN-T/appli_codes/Repos/Lab14/carfront/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _slicedToArray from \"/home/mnck/MNCK/Programmes/Semestre5/DevAppN-T/appli_codes/Repos/Lab14/carfront/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nvar _excluded = [\"id\", \"field\"],\n  _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nvar missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#server-side-persistence.'], 'error');\nexport var useGridCellEditing = function useGridCellEditing(apiRef, props) {\n  var _React$useState = React.useState({}),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    cellModesModel = _React$useState2[0],\n    setCellModesModel = _React$useState2[1];\n  var cellModesModelRef = React.useRef(cellModesModel);\n  var prevCellModesModel = React.useRef({});\n  var processRowUpdate = props.processRowUpdate,\n    onProcessRowUpdateError = props.onProcessRowUpdateError,\n    cellModesModelProp = props.cellModesModel,\n    onCellModesModelChange = props.onCellModesModelChange;\n  var runIfEditModeIsCell = function runIfEditModeIsCell(callback) {\n    return function () {\n      if (props.editMode === GridEditModes.Cell) {\n        callback.apply(void 0, arguments);\n      }\n    };\n  };\n  var throwIfNotEditable = React.useCallback(function (id, field) {\n    var params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(\"MUI: The cell with id=\".concat(id, \" and field=\").concat(field, \" is not editable.\"));\n    }\n  }, [apiRef]);\n  var throwIfNotInMode = React.useCallback(function (id, field, mode) {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(\"MUI: The cell with id=\".concat(id, \" and field=\").concat(field, \" is not in \").concat(mode, \" mode.\"));\n    }\n  }, [apiRef]);\n  var handleCellDoubleClick = React.useCallback(function (params, event) {\n    if (!params.isEditable) {\n      return;\n    }\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n    var newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  var handleCellFocusOut = React.useCallback(function (params, event) {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {\n      return;\n    }\n    var newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  var handleCellKeyDown = React.useCallback(function (params, event) {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n      var reason;\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        var newParams = _extends({}, params, {\n          reason: reason\n        });\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      var _reason;\n      var canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event: event,\n        cellParams: params,\n        editMode: 'cell'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if (isPrintableKey(event)) {\n        _reason = GridCellEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        _reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        _reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        _reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n      if (_reason) {\n        var _newParams = _extends({}, params, {\n          reason: _reason,\n          key: event.key\n        });\n        apiRef.current.publishEvent('cellEditStart', _newParams, event);\n      }\n    }\n  }, [apiRef]);\n  var handleCellEditStart = React.useCallback(function (params) {\n    var id = params.id,\n      field = params.field,\n      reason = params.reason,\n      key = params.key,\n      colDef = params.colDef;\n    var startCellEditModeParams = {\n      id: id,\n      field: field\n    };\n    if (reason === GridCellEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('17')) {\n        // In React 17, cleaning the input is enough.\n        // The sequence of events makes the key pressed by the end-users update the textbox directly.\n        startCellEditModeParams.deleteValue = true;\n      } else {\n        var initialValue = colDef.valueParser ? colDef.valueParser(key) : key;\n        startCellEditModeParams.initialValue = initialValue;\n      }\n    } else if (reason === GridCellEditStartReasons.deleteKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  var handleCellEditStop = React.useCallback(function (params) {\n    var id = params.id,\n      field = params.field,\n      reason = params.reason;\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    var cellToFocusAfter;\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    var ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopCellEditMode({\n      id: id,\n      field: field,\n      ignoreModifications: ignoreModifications,\n      cellToFocusAfter: cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n  var getCellMode = React.useCallback(function (id, field) {\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  var updateCellModesModel = useEventCallback(function (newModel) {\n    var isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      onCellModesModelChange(newModel, {});\n    }\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  });\n  var updateFieldInCellModesModel = React.useCallback(function (id, field, newProps) {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    var newModel = _extends({}, cellModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], _defineProperty({}, field, _extends({}, newProps)));\n    } else {\n      var _newModel$id = newModel[id],\n        otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n      newModel[id] = otherFields;\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  var updateOrDeleteFieldState = React.useCallback(function (id, field, newProps) {\n    apiRef.current.setState(function (state) {\n      var newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], _defineProperty({}, field, _extends({}, newProps)));\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  var startCellEditMode = React.useCallback(function (params) {\n    var id = params.id,\n      field = params.field,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  var updateStateToStartCellEditMode = useEventCallback(function (params) {\n    var id = params.id,\n      field = params.field,\n      deleteValue = params.deleteValue,\n      initialValue = params.initialValue;\n    var newValue = apiRef.current.getCellValue(id, field);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    var unstable_updateValueOnRender = false;\n    if (deleteValue || initialValue) {\n      newValue = deleteValue ? '' : initialValue;\n      unstable_updateValueOnRender = true;\n    }\n    var newProps = {\n      value: newValue,\n      error: false,\n      isProcessingProps: false,\n      unstable_updateValueOnRender: unstable_updateValueOnRender\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  });\n  var stopCellEditMode = React.useCallback(function (params) {\n    var id = params.id,\n      field = params.field,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  var updateStateToStopCellEditMode = useEventCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(params) {\n      var id, field, ignoreModifications, _params$cellToFocusAf, cellToFocusAfter, finishCellEditMode, editingState, _editingState$id$fiel, error, isProcessingProps, rowUpdate, handleError, row;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            id = params.id, field = params.field, ignoreModifications = params.ignoreModifications, _params$cellToFocusAf = params.cellToFocusAfter, cellToFocusAfter = _params$cellToFocusAf === void 0 ? 'none' : _params$cellToFocusAf;\n            throwIfNotInMode(id, field, GridCellModes.Edit);\n            apiRef.current.runPendingEditCellValueMutation(id, field);\n            finishCellEditMode = function finishCellEditMode() {\n              updateOrDeleteFieldState(id, field, null);\n              updateFieldInCellModesModel(id, field, null);\n              if (cellToFocusAfter !== 'none') {\n                apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);\n              }\n            };\n            if (!ignoreModifications) {\n              _context.next = 7;\n              break;\n            }\n            finishCellEditMode();\n            return _context.abrupt(\"return\");\n          case 7:\n            editingState = gridEditRowsStateSelector(apiRef.current.state);\n            _editingState$id$fiel = editingState[id][field], error = _editingState$id$fiel.error, isProcessingProps = _editingState$id$fiel.isProcessingProps;\n            if (!(error || isProcessingProps)) {\n              _context.next = 13;\n              break;\n            }\n            // Attempt to change cell mode to \"view\" was not successful\n            // Update previous mode to allow another attempt\n            prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n            // Revert the mode in the cellModesModel prop back to \"edit\"\n            updateFieldInCellModesModel(id, field, {\n              mode: GridCellModes.Edit\n            });\n            return _context.abrupt(\"return\");\n          case 13:\n            rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);\n            if (processRowUpdate) {\n              handleError = function handleError(errorThrown) {\n                prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n                // Revert the mode in the cellModesModel prop back to \"edit\"\n                updateFieldInCellModesModel(id, field, {\n                  mode: GridCellModes.Edit\n                });\n                if (onProcessRowUpdateError) {\n                  onProcessRowUpdateError(errorThrown);\n                } else {\n                  missingOnProcessRowUpdateErrorWarning();\n                }\n              };\n              try {\n                row = apiRef.current.getRow(id);\n                Promise.resolve(processRowUpdate(rowUpdate, row)).then(function (finalRowUpdate) {\n                  apiRef.current.updateRows([finalRowUpdate]);\n                  finishCellEditMode();\n                }).catch(handleError);\n              } catch (errorThrown) {\n                handleError(errorThrown);\n              }\n            } else {\n              apiRef.current.updateRows([rowUpdate]);\n              finishCellEditMode();\n            }\n          case 15:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n  var setCellEditingEditCellValue = React.useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params) {\n      var _editingState$id, id, field, value, debounceMs, skipValueParser, column, row, parsedValue, editingState, newProps, hasChanged;\n      return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n        while (1) switch (_context2.prev = _context2.next) {\n          case 0:\n            id = params.id, field = params.field, value = params.value, debounceMs = params.debounceMs, skipValueParser = params.unstable_skipValueParser;\n            throwIfNotEditable(id, field);\n            throwIfNotInMode(id, field, GridCellModes.Edit);\n            column = apiRef.current.getColumn(field);\n            row = apiRef.current.getRow(id);\n            parsedValue = value;\n            if (column.valueParser && !skipValueParser) {\n              parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n            }\n            editingState = gridEditRowsStateSelector(apiRef.current.state);\n            newProps = _extends({}, editingState[id][field], {\n              value: parsedValue,\n              changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n            });\n            if (!column.preProcessEditCellProps) {\n              _context2.next = 16;\n              break;\n            }\n            hasChanged = value !== editingState[id][field].value;\n            newProps = _extends({}, newProps, {\n              isProcessingProps: true\n            });\n            updateOrDeleteFieldState(id, field, newProps);\n            _context2.next = 15;\n            return Promise.resolve(column.preProcessEditCellProps({\n              id: id,\n              row: row,\n              props: newProps,\n              hasChanged: hasChanged\n            }));\n          case 15:\n            newProps = _context2.sent;\n          case 16:\n            if (!(apiRef.current.getCellMode(id, field) === GridCellModes.View)) {\n              _context2.next = 18;\n              break;\n            }\n            return _context2.abrupt(\"return\", false);\n          case 18:\n            editingState = gridEditRowsStateSelector(apiRef.current.state);\n            newProps = _extends({}, newProps, {\n              isProcessingProps: false\n            });\n            // We don't update the value with the one coming from the props pre-processing\n            // because when the promise resolves it may be already outdated. The only\n            // exception to this rule is when there's no pre-processing.\n            newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n            updateOrDeleteFieldState(id, field, newProps);\n            editingState = gridEditRowsStateSelector(apiRef.current.state);\n            return _context2.abrupt(\"return\", !((_editingState$id = editingState[id]) != null && (_editingState$id = _editingState$id[field]) != null && _editingState$id.error));\n          case 24:\n          case \"end\":\n            return _context2.stop();\n        }\n      }, _callee2);\n    }));\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  var getRowWithUpdatedValuesFromCellEditing = React.useCallback(function (id, field) {\n    var column = apiRef.current.getColumn(field);\n    var editingState = gridEditRowsStateSelector(apiRef.current.state);\n    var row = apiRef.current.getRow(id);\n    if (!editingState[id] || !editingState[id][field]) {\n      return apiRef.current.getRow(id);\n    }\n    var value = editingState[id][field].value;\n    return column.valueSetter ? column.valueSetter({\n      value: value,\n      row: row\n    }) : _extends({}, row, _defineProperty({}, field, value));\n  }, [apiRef]);\n  var editingApi = {\n    getCellMode: getCellMode,\n    startCellEditMode: startCellEditMode,\n    stopCellEditMode: stopCellEditMode\n  };\n  var editingPrivateApi = {\n    setCellEditingEditCellValue: setCellEditingEditCellValue,\n    getRowWithUpdatedValuesFromCellEditing: getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(function () {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n  React.useEffect(function () {\n    var idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopCellEditMode may change it later\n    var copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = deepClone(cellModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(cellModesModel).forEach(function (_ref3) {\n      var _ref4 = _slicedToArray(_ref3, 2),\n        id = _ref4[0],\n        fields = _ref4[1];\n      Object.entries(fields).forEach(function (_ref5) {\n        var _ref6 = _slicedToArray(_ref5, 2),\n          field = _ref6[0],\n          params = _ref6[1];\n        var _copyOfPrevCellModes$, _idToIdLookup$id;\n        var prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null || (_copyOfPrevCellModes$ = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$.mode) || GridCellModes.View;\n        var originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field: field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field: field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};","map":{"version":3,"names":["_objectWithoutPropertiesLoose","_toPropertyKey","_extends","_excluded","_excluded2","React","unstable_useEventCallback","useEventCallback","useGridApiEventHandler","useGridApiOptionHandler","GridEditModes","GridCellModes","useGridApiMethod","gridEditRowsStateSelector","isPrintableKey","buildWarning","gridRowsDataRowIdToIdLookupSelector","deepClone","GridCellEditStartReasons","GridCellEditStopReasons","missingOnProcessRowUpdateErrorWarning","useGridCellEditing","apiRef","props","_React$useState","useState","_React$useState2","_slicedToArray","cellModesModel","setCellModesModel","cellModesModelRef","useRef","prevCellModesModel","processRowUpdate","onProcessRowUpdateError","cellModesModelProp","onCellModesModelChange","runIfEditModeIsCell","callback","editMode","Cell","apply","arguments","throwIfNotEditable","useCallback","id","field","params","current","getCellParams","isCellEditable","Error","concat","throwIfNotInMode","mode","getCellMode","handleCellDoubleClick","event","isEditable","cellMode","Edit","newParams","reason","cellDoubleClick","publishEvent","handleCellFocusOut","View","cellFocusOut","handleCellKeyDown","which","key","escapeKeyDown","enterKeyDown","shiftKey","shiftTabKeyDown","tabKeyDown","preventDefault","canStartEditing","unstable_applyPipeProcessors","cellParams","printableKeyDown","ctrlKey","metaKey","deleteKeyDown","handleCellEditStart","colDef","startCellEditModeParams","version","startsWith","deleteValue","initialValue","valueParser","startCellEditMode","handleCellEditStop","runPendingEditCellValueMutation","cellToFocusAfter","ignoreModifications","stopCellEditMode","onCellEditStart","onCellEditStop","editingState","state","isEditing","updateCellModesModel","newModel","isNewModelDifferentFromProp","updateFieldInCellModesModel","newProps","_defineProperty","_newModel$id","otherFields","map","Object","keys","length","updateOrDeleteFieldState","setState","newEditingState","editRows","forceUpdate","other","updateStateToStartCellEditMode","newValue","getCellValue","unstable_updateValueOnRender","value","error","isProcessingProps","setCellFocus","updateStateToStopCellEditMode","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","_params$cellToFocusAf","finishCellEditMode","_editingState$id$fiel","rowUpdate","handleError","row","wrap","_callee$","_context","prev","next","moveFocusToRelativeCell","abrupt","getRowWithUpdatedValuesFromCellEditing","errorThrown","getRow","Promise","resolve","then","finalRowUpdate","updateRows","catch","stop","_x","setCellEditingEditCellValue","_ref2","_callee2","_editingState$id","debounceMs","skipValueParser","column","parsedValue","hasChanged","_callee2$","_context2","unstable_skipValueParser","getColumn","changeReason","preProcessEditCellProps","sent","_x2","valueSetter","editingApi","editingPrivateApi","useEffect","idToIdLookup","copyOfPrevCellModes","entries","forEach","_ref3","_ref4","fields","_ref5","_ref6","_copyOfPrevCellModes$","_idToIdLookup$id","prevMode","originalId"],"sources":["/home/mnck/MNCK/Programmes/Semestre5/DevAppN-T/appli_codes/Repos/Lab14/carfront/node_modules/@mui/x-data-grid/hooks/features/editing/useGridCellEditing.js"],"sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _toPropertyKey from \"@babel/runtime/helpers/esm/toPropertyKey\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"id\", \"field\"],\n  _excluded2 = [\"id\", \"field\"];\nimport * as React from 'react';\nimport { unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useGridApiEventHandler, useGridApiOptionHandler } from '../../utils/useGridApiEventHandler';\nimport { GridEditModes, GridCellModes } from '../../../models/gridEditRowModel';\nimport { useGridApiMethod } from '../../utils/useGridApiMethod';\nimport { gridEditRowsStateSelector } from './gridEditingSelectors';\nimport { isPrintableKey } from '../../../utils/keyboardUtils';\nimport { buildWarning } from '../../../utils/warning';\nimport { gridRowsDataRowIdToIdLookupSelector } from '../rows/gridRowsSelector';\nimport { deepClone } from '../../../utils/utils';\nimport { GridCellEditStartReasons, GridCellEditStopReasons } from '../../../models/params/gridEditCellParams';\nconst missingOnProcessRowUpdateErrorWarning = buildWarning(['MUI: A call to `processRowUpdate` threw an error which was not handled because `onProcessRowUpdateError` is missing.', 'To handle the error pass a callback to the `onProcessRowUpdateError` prop, e.g. `<DataGrid onProcessRowUpdateError={(error) => ...} />`.', 'For more detail, see http://mui.com/components/data-grid/editing/#server-side-persistence.'], 'error');\nexport const useGridCellEditing = (apiRef, props) => {\n  const [cellModesModel, setCellModesModel] = React.useState({});\n  const cellModesModelRef = React.useRef(cellModesModel);\n  const prevCellModesModel = React.useRef({});\n  const {\n    processRowUpdate,\n    onProcessRowUpdateError,\n    cellModesModel: cellModesModelProp,\n    onCellModesModelChange\n  } = props;\n  const runIfEditModeIsCell = callback => (...args) => {\n    if (props.editMode === GridEditModes.Cell) {\n      callback(...args);\n    }\n  };\n  const throwIfNotEditable = React.useCallback((id, field) => {\n    const params = apiRef.current.getCellParams(id, field);\n    if (!apiRef.current.isCellEditable(params)) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not editable.`);\n    }\n  }, [apiRef]);\n  const throwIfNotInMode = React.useCallback((id, field, mode) => {\n    if (apiRef.current.getCellMode(id, field) !== mode) {\n      throw new Error(`MUI: The cell with id=${id} and field=${field} is not in ${mode} mode.`);\n    }\n  }, [apiRef]);\n  const handleCellDoubleClick = React.useCallback((params, event) => {\n    if (!params.isEditable) {\n      return;\n    }\n    if (params.cellMode === GridCellModes.Edit) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStartReasons.cellDoubleClick\n    });\n    apiRef.current.publishEvent('cellEditStart', newParams, event);\n  }, [apiRef]);\n  const handleCellFocusOut = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.View) {\n      return;\n    }\n    if (apiRef.current.getCellMode(params.id, params.field) === GridCellModes.View) {\n      return;\n    }\n    const newParams = _extends({}, params, {\n      reason: GridCellEditStopReasons.cellFocusOut\n    });\n    apiRef.current.publishEvent('cellEditStop', newParams, event);\n  }, [apiRef]);\n  const handleCellKeyDown = React.useCallback((params, event) => {\n    if (params.cellMode === GridCellModes.Edit) {\n      // Wait until IME is settled for Asian languages like Japanese and Chinese\n      // TODO: `event.which` is deprecated but this is a temporary workaround\n      if (event.which === 229) {\n        return;\n      }\n      let reason;\n      if (event.key === 'Escape') {\n        reason = GridCellEditStopReasons.escapeKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStopReasons.enterKeyDown;\n      } else if (event.key === 'Tab') {\n        reason = event.shiftKey ? GridCellEditStopReasons.shiftTabKeyDown : GridCellEditStopReasons.tabKeyDown;\n        event.preventDefault(); // Prevent going to the next element in the tab sequence\n      }\n\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason\n        });\n        apiRef.current.publishEvent('cellEditStop', newParams, event);\n      }\n    } else if (params.isEditable) {\n      let reason;\n      const canStartEditing = apiRef.current.unstable_applyPipeProcessors('canStartEditing', true, {\n        event,\n        cellParams: params,\n        editMode: 'cell'\n      });\n      if (!canStartEditing) {\n        return;\n      }\n      if (isPrintableKey(event)) {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if ((event.ctrlKey || event.metaKey) && event.key === 'v') {\n        reason = GridCellEditStartReasons.printableKeyDown;\n      } else if (event.key === 'Enter') {\n        reason = GridCellEditStartReasons.enterKeyDown;\n      } else if (event.key === 'Delete' || event.key === 'Backspace') {\n        // Delete on Windows, Backspace on macOS\n        reason = GridCellEditStartReasons.deleteKeyDown;\n      }\n      if (reason) {\n        const newParams = _extends({}, params, {\n          reason,\n          key: event.key\n        });\n        apiRef.current.publishEvent('cellEditStart', newParams, event);\n      }\n    }\n  }, [apiRef]);\n  const handleCellEditStart = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason,\n      key,\n      colDef\n    } = params;\n    const startCellEditModeParams = {\n      id,\n      field\n    };\n    if (reason === GridCellEditStartReasons.printableKeyDown) {\n      if (React.version.startsWith('17')) {\n        // In React 17, cleaning the input is enough.\n        // The sequence of events makes the key pressed by the end-users update the textbox directly.\n        startCellEditModeParams.deleteValue = true;\n      } else {\n        const initialValue = colDef.valueParser ? colDef.valueParser(key) : key;\n        startCellEditModeParams.initialValue = initialValue;\n      }\n    } else if (reason === GridCellEditStartReasons.deleteKeyDown) {\n      startCellEditModeParams.deleteValue = true;\n    }\n    apiRef.current.startCellEditMode(startCellEditModeParams);\n  }, [apiRef]);\n  const handleCellEditStop = React.useCallback(params => {\n    const {\n      id,\n      field,\n      reason\n    } = params;\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    let cellToFocusAfter;\n    if (reason === GridCellEditStopReasons.enterKeyDown) {\n      cellToFocusAfter = 'below';\n    } else if (reason === GridCellEditStopReasons.tabKeyDown) {\n      cellToFocusAfter = 'right';\n    } else if (reason === GridCellEditStopReasons.shiftTabKeyDown) {\n      cellToFocusAfter = 'left';\n    }\n    const ignoreModifications = reason === 'escapeKeyDown';\n    apiRef.current.stopCellEditMode({\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter\n    });\n  }, [apiRef]);\n  useGridApiEventHandler(apiRef, 'cellDoubleClick', runIfEditModeIsCell(handleCellDoubleClick));\n  useGridApiEventHandler(apiRef, 'cellFocusOut', runIfEditModeIsCell(handleCellFocusOut));\n  useGridApiEventHandler(apiRef, 'cellKeyDown', runIfEditModeIsCell(handleCellKeyDown));\n  useGridApiEventHandler(apiRef, 'cellEditStart', runIfEditModeIsCell(handleCellEditStart));\n  useGridApiEventHandler(apiRef, 'cellEditStop', runIfEditModeIsCell(handleCellEditStop));\n  useGridApiOptionHandler(apiRef, 'cellEditStart', props.onCellEditStart);\n  useGridApiOptionHandler(apiRef, 'cellEditStop', props.onCellEditStop);\n  const getCellMode = React.useCallback((id, field) => {\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const isEditing = editingState[id] && editingState[id][field];\n    return isEditing ? GridCellModes.Edit : GridCellModes.View;\n  }, [apiRef]);\n  const updateCellModesModel = useEventCallback(newModel => {\n    const isNewModelDifferentFromProp = newModel !== props.cellModesModel;\n    if (onCellModesModelChange && isNewModelDifferentFromProp) {\n      onCellModesModelChange(newModel, {});\n    }\n    if (props.cellModesModel && isNewModelDifferentFromProp) {\n      return; // The prop always win\n    }\n\n    setCellModesModel(newModel);\n    cellModesModelRef.current = newModel;\n    apiRef.current.publishEvent('cellModesModelChange', newModel);\n  });\n  const updateFieldInCellModesModel = React.useCallback((id, field, newProps) => {\n    // We use the ref because it always contain the up-to-date value, different from the state\n    // that needs a rerender to reflect the new value\n    const newModel = _extends({}, cellModesModelRef.current);\n    if (newProps !== null) {\n      newModel[id] = _extends({}, newModel[id], {\n        [field]: _extends({}, newProps)\n      });\n    } else {\n      const _newModel$id = newModel[id],\n        otherFields = _objectWithoutPropertiesLoose(_newModel$id, [field].map(_toPropertyKey)); // Ensure that we have a new object, not a reference\n      newModel[id] = otherFields;\n      if (Object.keys(newModel[id]).length === 0) {\n        delete newModel[id];\n      }\n    }\n    updateCellModesModel(newModel);\n  }, [updateCellModesModel]);\n  const updateOrDeleteFieldState = React.useCallback((id, field, newProps) => {\n    apiRef.current.setState(state => {\n      const newEditingState = _extends({}, state.editRows);\n      if (newProps !== null) {\n        newEditingState[id] = _extends({}, newEditingState[id], {\n          [field]: _extends({}, newProps)\n        });\n      } else {\n        delete newEditingState[id][field];\n        if (Object.keys(newEditingState[id]).length === 0) {\n          delete newEditingState[id];\n        }\n      }\n      return _extends({}, state, {\n        editRows: newEditingState\n      });\n    });\n    apiRef.current.forceUpdate();\n  }, [apiRef]);\n  const startCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded);\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.View);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.Edit\n    }, other));\n  }, [throwIfNotEditable, throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStartCellEditMode = useEventCallback(params => {\n    const {\n      id,\n      field,\n      deleteValue,\n      initialValue\n    } = params;\n    let newValue = apiRef.current.getCellValue(id, field);\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    let unstable_updateValueOnRender = false;\n    if (deleteValue || initialValue) {\n      newValue = deleteValue ? '' : initialValue;\n      unstable_updateValueOnRender = true;\n    }\n    const newProps = {\n      value: newValue,\n      error: false,\n      isProcessingProps: false,\n      unstable_updateValueOnRender\n    };\n    updateOrDeleteFieldState(id, field, newProps);\n    apiRef.current.setCellFocus(id, field);\n  });\n  const stopCellEditMode = React.useCallback(params => {\n    const {\n        id,\n        field\n      } = params,\n      other = _objectWithoutPropertiesLoose(params, _excluded2);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    updateFieldInCellModesModel(id, field, _extends({\n      mode: GridCellModes.View\n    }, other));\n  }, [throwIfNotInMode, updateFieldInCellModesModel]);\n  const updateStateToStopCellEditMode = useEventCallback(async params => {\n    const {\n      id,\n      field,\n      ignoreModifications,\n      cellToFocusAfter = 'none'\n    } = params;\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    apiRef.current.runPendingEditCellValueMutation(id, field);\n    const finishCellEditMode = () => {\n      updateOrDeleteFieldState(id, field, null);\n      updateFieldInCellModesModel(id, field, null);\n      if (cellToFocusAfter !== 'none') {\n        apiRef.current.moveFocusToRelativeCell(id, field, cellToFocusAfter);\n      }\n    };\n    if (ignoreModifications) {\n      finishCellEditMode();\n      return;\n    }\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const {\n      error,\n      isProcessingProps\n    } = editingState[id][field];\n    if (error || isProcessingProps) {\n      // Attempt to change cell mode to \"view\" was not successful\n      // Update previous mode to allow another attempt\n      prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n      // Revert the mode in the cellModesModel prop back to \"edit\"\n      updateFieldInCellModesModel(id, field, {\n        mode: GridCellModes.Edit\n      });\n      return;\n    }\n    const rowUpdate = apiRef.current.getRowWithUpdatedValuesFromCellEditing(id, field);\n    if (processRowUpdate) {\n      const handleError = errorThrown => {\n        prevCellModesModel.current[id][field].mode = GridCellModes.Edit;\n        // Revert the mode in the cellModesModel prop back to \"edit\"\n        updateFieldInCellModesModel(id, field, {\n          mode: GridCellModes.Edit\n        });\n        if (onProcessRowUpdateError) {\n          onProcessRowUpdateError(errorThrown);\n        } else {\n          missingOnProcessRowUpdateErrorWarning();\n        }\n      };\n      try {\n        const row = apiRef.current.getRow(id);\n        Promise.resolve(processRowUpdate(rowUpdate, row)).then(finalRowUpdate => {\n          apiRef.current.updateRows([finalRowUpdate]);\n          finishCellEditMode();\n        }).catch(handleError);\n      } catch (errorThrown) {\n        handleError(errorThrown);\n      }\n    } else {\n      apiRef.current.updateRows([rowUpdate]);\n      finishCellEditMode();\n    }\n  });\n  const setCellEditingEditCellValue = React.useCallback(async params => {\n    var _editingState$id;\n    const {\n      id,\n      field,\n      value,\n      debounceMs,\n      unstable_skipValueParser: skipValueParser\n    } = params;\n    throwIfNotEditable(id, field);\n    throwIfNotInMode(id, field, GridCellModes.Edit);\n    const column = apiRef.current.getColumn(field);\n    const row = apiRef.current.getRow(id);\n    let parsedValue = value;\n    if (column.valueParser && !skipValueParser) {\n      parsedValue = column.valueParser(value, apiRef.current.getCellParams(id, field));\n    }\n    let editingState = gridEditRowsStateSelector(apiRef.current.state);\n    let newProps = _extends({}, editingState[id][field], {\n      value: parsedValue,\n      changeReason: debounceMs ? 'debouncedSetEditCellValue' : 'setEditCellValue'\n    });\n    if (column.preProcessEditCellProps) {\n      const hasChanged = value !== editingState[id][field].value;\n      newProps = _extends({}, newProps, {\n        isProcessingProps: true\n      });\n      updateOrDeleteFieldState(id, field, newProps);\n      newProps = await Promise.resolve(column.preProcessEditCellProps({\n        id,\n        row,\n        props: newProps,\n        hasChanged\n      }));\n    }\n\n    // Check again if the cell is in edit mode because the user may have\n    // discarded the changes while the props were being processed.\n    if (apiRef.current.getCellMode(id, field) === GridCellModes.View) {\n      return false;\n    }\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    newProps = _extends({}, newProps, {\n      isProcessingProps: false\n    });\n    // We don't update the value with the one coming from the props pre-processing\n    // because when the promise resolves it may be already outdated. The only\n    // exception to this rule is when there's no pre-processing.\n    newProps.value = column.preProcessEditCellProps ? editingState[id][field].value : parsedValue;\n    updateOrDeleteFieldState(id, field, newProps);\n    editingState = gridEditRowsStateSelector(apiRef.current.state);\n    return !((_editingState$id = editingState[id]) != null && (_editingState$id = _editingState$id[field]) != null && _editingState$id.error);\n  }, [apiRef, throwIfNotEditable, throwIfNotInMode, updateOrDeleteFieldState]);\n  const getRowWithUpdatedValuesFromCellEditing = React.useCallback((id, field) => {\n    const column = apiRef.current.getColumn(field);\n    const editingState = gridEditRowsStateSelector(apiRef.current.state);\n    const row = apiRef.current.getRow(id);\n    if (!editingState[id] || !editingState[id][field]) {\n      return apiRef.current.getRow(id);\n    }\n    const {\n      value\n    } = editingState[id][field];\n    return column.valueSetter ? column.valueSetter({\n      value,\n      row\n    }) : _extends({}, row, {\n      [field]: value\n    });\n  }, [apiRef]);\n  const editingApi = {\n    getCellMode,\n    startCellEditMode,\n    stopCellEditMode\n  };\n  const editingPrivateApi = {\n    setCellEditingEditCellValue,\n    getRowWithUpdatedValuesFromCellEditing\n  };\n  useGridApiMethod(apiRef, editingApi, 'public');\n  useGridApiMethod(apiRef, editingPrivateApi, 'private');\n  React.useEffect(() => {\n    if (cellModesModelProp) {\n      updateCellModesModel(cellModesModelProp);\n    }\n  }, [cellModesModelProp, updateCellModesModel]);\n  React.useEffect(() => {\n    const idToIdLookup = gridRowsDataRowIdToIdLookupSelector(apiRef);\n\n    // Update the ref here because updateStateToStopCellEditMode may change it later\n    const copyOfPrevCellModes = prevCellModesModel.current;\n    prevCellModesModel.current = deepClone(cellModesModel); // Do a deep-clone because the attributes might be changed later\n\n    Object.entries(cellModesModel).forEach(([id, fields]) => {\n      Object.entries(fields).forEach(([field, params]) => {\n        var _copyOfPrevCellModes$, _idToIdLookup$id;\n        const prevMode = ((_copyOfPrevCellModes$ = copyOfPrevCellModes[id]) == null || (_copyOfPrevCellModes$ = _copyOfPrevCellModes$[field]) == null ? void 0 : _copyOfPrevCellModes$.mode) || GridCellModes.View;\n        const originalId = (_idToIdLookup$id = idToIdLookup[id]) != null ? _idToIdLookup$id : id;\n        if (params.mode === GridCellModes.Edit && prevMode === GridCellModes.View) {\n          updateStateToStartCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        } else if (params.mode === GridCellModes.View && prevMode === GridCellModes.Edit) {\n          updateStateToStopCellEditMode(_extends({\n            id: originalId,\n            field\n          }, params));\n        }\n      });\n    });\n  }, [apiRef, cellModesModel, updateStateToStartCellEditMode, updateStateToStopCellEditMode]);\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}