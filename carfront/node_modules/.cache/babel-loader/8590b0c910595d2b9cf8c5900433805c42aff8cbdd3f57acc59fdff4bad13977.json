{"ast":null,"code":"import _toConsumableArray from \"/home/mnck/MNCK/Programmes/Semestre5/DevAppN-T/appli_codes/Repos/Lab14/carfront/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/home/mnck/MNCK/Programmes/Semestre5/DevAppN-T/appli_codes/Repos/Lab14/carfront/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nvar _excluded = [\"style\"],\n  _excluded2 = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../rowSelection/gridRowSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils';\nimport { getMinimalContentHeight } from '../rows/gridRowsUtils';\nimport { gridVirtualizationEnabledSelector, gridVirtualizationColumnEnabledSelector } from './gridVirtualizationSelectors';\n\n// Uses binary search to avoid looping through all possible positions\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function binarySearch(offset, positions) {\n  var sliceStart = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n  var sliceEnd = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : positions.length;\n  if (positions.length <= 0) {\n    return -1;\n  }\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n  var pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  var itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\nfunction exponentialSearch(offset, positions, index) {\n  var interval = 1;\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\nexport var getRenderableIndexes = function getRenderableIndexes(_ref3) {\n  var firstIndex = _ref3.firstIndex,\n    lastIndex = _ref3.lastIndex,\n    buffer = _ref3.buffer,\n    minFirstIndex = _ref3.minFirstIndex,\n    maxLastIndex = _ref3.maxLastIndex;\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport var areRenderContextsEqual = function areRenderContextsEqual(context1, context2) {\n  if (context1 === context2) {\n    return true;\n  }\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\n// The `maxSize` is 3 so that reselect caches the `renderedColumns` values for the pinned left,\n// unpinned, and pinned right sections.\nvar MEMOIZE_OPTIONS = {\n  maxSize: 3\n};\nexport var useGridVirtualScroller = function useGridVirtualScroller(props) {\n  var _currentPage$range3, _currentPage$range4;\n  var apiRef = useGridPrivateApiContext();\n  var rootProps = useGridRootProps();\n  var visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  var enabled = useGridSelector(apiRef, gridVirtualizationEnabledSelector);\n  var enabledForColumns = useGridSelector(apiRef, gridVirtualizationColumnEnabledSelector);\n  var ref = props.ref,\n    onRenderZonePositioning = props.onRenderZonePositioning,\n    _props$renderZoneMinC = props.renderZoneMinColumnIndex,\n    renderZoneMinColumnIndex = _props$renderZoneMinC === void 0 ? 0 : _props$renderZoneMinC,\n    _props$renderZoneMaxC = props.renderZoneMaxColumnIndex,\n    renderZoneMaxColumnIndex = _props$renderZoneMaxC === void 0 ? visibleColumns.length : _props$renderZoneMaxC,\n    getRowProps = props.getRowProps;\n  var theme = useTheme();\n  var columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  var columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  var cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  var cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  var rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  var selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  var currentPage = useGridVisibleRows(apiRef, rootProps);\n  var renderZoneRef = React.useRef(null);\n  var rootRef = React.useRef(null);\n  var handleRef = useForkRef(ref, rootRef);\n  var _React$useState = React.useState(null),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    renderContext = _React$useState2[0],\n    setRenderContextState = _React$useState2[1];\n  var prevRenderContext = React.useRef(renderContext);\n  var scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  var _React$useState3 = React.useState({\n      width: null,\n      height: null\n    }),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    containerDimensions = _React$useState4[0],\n    setContainerDimensions = _React$useState4[1];\n  var prevTotalWidth = React.useRef(columnsTotalWidth);\n  // Each visible row (not to be confused with a filter result) is composed of a central row element\n  // and up to two additional row elements for pinned columns (left and right).\n  // When hovering any of these elements, the :hover styles are applied only to the row element that\n  // was actually hovered, not its additional siblings. To make it look like a contiguous row,\n  // we add/remove the .Mui-hovered class to all of the row elements inside one visible row.\n  var _React$useState5 = React.useState(null),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    hoveredRowId = _React$useState6[0],\n    setHoveredRowId = _React$useState6[1];\n  var rowStyleCache = React.useRef(Object.create(null));\n  var prevGetRowProps = React.useRef();\n  var prevRootRowStyle = React.useRef();\n  var getRenderedColumnsRef = React.useRef(defaultMemoize(function (columns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, indexOfColumnWithFocusedCell) {\n    // If the selected column is not within the current range of columns being displayed,\n    // we need to render it at either the left or right of the columns,\n    // depending on whether it is above or below the range.\n    var focusedCellColumnIndexNotInRange;\n    var renderedColumns = columns.slice(firstColumnToRender, lastColumnToRender);\n    if (indexOfColumnWithFocusedCell > -1) {\n      // check if it is not on the left pinned column.\n      if (firstColumnToRender > indexOfColumnWithFocusedCell && indexOfColumnWithFocusedCell >= minFirstColumn) {\n        focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell;\n      }\n      // check if it is not on the right pinned column.\n      else if (lastColumnToRender < indexOfColumnWithFocusedCell && indexOfColumnWithFocusedCell < maxLastColumn) {\n        focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell;\n      }\n    }\n    return {\n      focusedCellColumnIndexNotInRange: focusedCellColumnIndexNotInRange,\n      renderedColumns: renderedColumns\n    };\n  }, MEMOIZE_OPTIONS));\n  var indexOfColumnWithFocusedCell = React.useMemo(function () {\n    if (cellFocus !== null) {\n      return visibleColumns.findIndex(function (column) {\n        return column.field === cellFocus.field;\n      });\n    }\n    return -1;\n  }, [cellFocus, visibleColumns]);\n  var getNearestIndexToRender = React.useCallback(function (offset) {\n    var _currentPage$range, _currentPage$range2;\n    var lastMeasuredIndexRelativeToAllRows = apiRef.current.getLastMeasuredRowIndex();\n    var allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n    var lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    }\n\n    // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  var computeRenderContext = React.useCallback(function () {\n    if (!enabled) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n    var _scrollPosition$curre = scrollPosition.current,\n      top = _scrollPosition$curre.top,\n      left = _scrollPosition$curre.left;\n\n    // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n    var firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    var lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    var firstColumnIndex = 0;\n    var lastColumnIndex = columnPositions.length;\n    if (enabledForColumns) {\n      var hasRowWithAutoHeight = false;\n      var _getRenderableIndexes = getRenderableIndexes({\n          firstIndex: firstRowIndex,\n          lastIndex: lastRowIndex,\n          minFirstIndex: 0,\n          maxLastIndex: currentPage.rows.length,\n          buffer: rootProps.rowBuffer\n        }),\n        _getRenderableIndexes2 = _slicedToArray(_getRenderableIndexes, 2),\n        firstRowToRender = _getRenderableIndexes2[0],\n        lastRowToRender = _getRenderableIndexes2[1];\n      for (var i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n        var row = currentPage.rows[i];\n        hasRowWithAutoHeight = apiRef.current.rowHasAutoHeight(row.id);\n      }\n      if (!hasRowWithAutoHeight) {\n        firstColumnIndex = binarySearch(Math.abs(left), columnPositions);\n        lastColumnIndex = binarySearch(Math.abs(left) + containerDimensions.width, columnPositions);\n      }\n    }\n    return {\n      firstRowIndex: firstRowIndex,\n      lastRowIndex: lastRowIndex,\n      firstColumnIndex: firstColumnIndex,\n      lastColumnIndex: lastColumnIndex\n    };\n  }, [enabled, enabledForColumns, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(function () {\n    if (enabled) {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    } else {\n      renderZoneRef.current.style.transform = \"translate3d(0px, 0px, 0px)\";\n    }\n  }, [enabled]);\n  useEnhancedEffect(function () {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  var handleResize = React.useCallback(function () {\n    if (rootRef.current) {\n      setContainerDimensions({\n        width: rootRef.current.clientWidth,\n        height: rootRef.current.clientHeight\n      });\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'debouncedResize', handleResize);\n  var updateRenderZonePosition = React.useCallback(function (nextRenderContext) {\n    var _getRenderableIndexes3 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstRowIndex,\n        lastIndex: nextRenderContext.lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rootProps.rowBuffer\n      }),\n      _getRenderableIndexes4 = _slicedToArray(_getRenderableIndexes3, 2),\n      firstRowToRender = _getRenderableIndexes4[0],\n      lastRowToRender = _getRenderableIndexes4[1];\n    var _getRenderableIndexes5 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstColumnIndex,\n        lastIndex: nextRenderContext.lastColumnIndex,\n        minFirstIndex: renderZoneMinColumnIndex,\n        maxLastIndex: renderZoneMaxColumnIndex,\n        buffer: rootProps.columnBuffer\n      }),\n      _getRenderableIndexes6 = _slicedToArray(_getRenderableIndexes5, 1),\n      initialFirstColumnToRender = _getRenderableIndexes6[0];\n    var firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef: apiRef,\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    var direction = theme.direction === 'ltr' ? 1 : -1;\n    var top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    var left = direction * gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n    renderZoneRef.current.style.transform = \"translate3d(\".concat(left, \"px, \").concat(top, \"px, 0px)\");\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top: top,\n        left: left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer, theme.direction]);\n  var getRenderContext = React.useCallback(function () {\n    return prevRenderContext.current;\n  }, []);\n  var setRenderContext = React.useCallback(function (nextRenderContext) {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n    setRenderContextState(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    var _getRenderableIndexes7 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstRowIndex,\n        lastIndex: nextRenderContext.lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rootProps.rowBuffer\n      }),\n      _getRenderableIndexes8 = _slicedToArray(_getRenderableIndexes7, 2),\n      firstRowToRender = _getRenderableIndexes8[0],\n      lastRowToRender = _getRenderableIndexes8[1];\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContextState, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(function () {\n    if (containerDimensions.width == null) {\n      return;\n    }\n    var initialRenderContext = computeRenderContext();\n    setRenderContext(initialRenderContext);\n    var _scrollPosition$curre2 = scrollPosition.current,\n      top = _scrollPosition$curre2.top,\n      left = _scrollPosition$curre2.left;\n    var params = {\n      top: top,\n      left: left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('scrollPositionChange', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, setRenderContext]);\n  var handleScroll = useEventCallback(function (event) {\n    var _event$currentTarget = event.currentTarget,\n      scrollTop = _event$currentTarget.scrollTop,\n      scrollLeft = _event$currentTarget.scrollLeft;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft;\n\n    // On iOS and macOS, negative offsets are possible when swiping past the start\n    if (!prevRenderContext.current || scrollTop < 0) {\n      return;\n    }\n    if (theme.direction === 'ltr') {\n      if (scrollLeft < 0) {\n        return;\n      }\n    }\n    if (theme.direction === 'rtl') {\n      if (scrollLeft > 0) {\n        return;\n      }\n    }\n\n    // When virtualization is disabled, the context never changes during scroll\n    var nextRenderContext = enabled ? computeRenderContext() : prevRenderContext.current;\n    var topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    var bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    var topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    var bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    var shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth;\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(function () {\n        setRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  });\n  var handleWheel = useEventCallback(function (event) {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  });\n  var handleTouchMove = useEventCallback(function (event) {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  });\n  var indexOfRowWithFocusedCell = React.useMemo(function () {\n    if (cellFocus !== null) {\n      return currentPage.rows.findIndex(function (row) {\n        return row.id === cellFocus.id;\n      });\n    }\n    return -1;\n  }, [cellFocus, currentPage.rows]);\n  useGridApiEventHandler(apiRef, 'rowMouseOver', function (params, event) {\n    var _params$id;\n    if (event.currentTarget.contains(event.relatedTarget)) {\n      return;\n    }\n    setHoveredRowId((_params$id = params.id) != null ? _params$id : null);\n  });\n  useGridApiEventHandler(apiRef, 'rowMouseOut', function (params, event) {\n    if (event.currentTarget.contains(event.relatedTarget)) {\n      return;\n    }\n    setHoveredRowId(null);\n  });\n  var getRows = function getRows() {\n    var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {\n      renderContext: renderContext\n    };\n    var _rootProps$slotProps;\n    var onRowRender = params.onRowRender,\n      nextRenderContext = params.renderContext,\n      _params$minFirstColum = params.minFirstColumn,\n      minFirstColumn = _params$minFirstColum === void 0 ? renderZoneMinColumnIndex : _params$minFirstColum,\n      _params$maxLastColumn = params.maxLastColumn,\n      maxLastColumn = _params$maxLastColumn === void 0 ? renderZoneMaxColumnIndex : _params$maxLastColumn,\n      _params$availableSpac = params.availableSpace,\n      availableSpace = _params$availableSpac === void 0 ? containerDimensions.width : _params$availableSpac,\n      _params$rowIndexOffse = params.rowIndexOffset,\n      rowIndexOffset = _params$rowIndexOffse === void 0 ? 0 : _params$rowIndexOffse,\n      _params$position = params.position,\n      position = _params$position === void 0 ? 'center' : _params$position;\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n    var rowBuffer = enabled ? rootProps.rowBuffer : 0;\n    var columnBuffer = enabled ? rootProps.columnBuffer : 0;\n    var _getRenderableIndexes9 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstRowIndex,\n        lastIndex: nextRenderContext.lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rowBuffer\n      }),\n      _getRenderableIndexes10 = _slicedToArray(_getRenderableIndexes9, 2),\n      firstRowToRender = _getRenderableIndexes10[0],\n      lastRowToRender = _getRenderableIndexes10[1];\n    var renderedRows = [];\n    if (params.rows) {\n      params.rows.forEach(function (row) {\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn: minFirstColumn,\n          maxLastColumn: maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n      for (var i = firstRowToRender; i < lastRowToRender; i += 1) {\n        var row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn: minFirstColumn,\n          maxLastColumn: maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    // If the selected row is not within the current range of rows being displayed,\n    // we need to render it at either the top or bottom of the rows,\n    // depending on whether it is above or below the range.\n\n    var isRowWithFocusedCellNotInRange = false;\n    if (indexOfRowWithFocusedCell > -1) {\n      var rowWithFocusedCell = currentPage.rows[indexOfRowWithFocusedCell];\n      if (firstRowToRender > indexOfRowWithFocusedCell || lastRowToRender < indexOfRowWithFocusedCell) {\n        isRowWithFocusedCellNotInRange = true;\n        if (indexOfRowWithFocusedCell > firstRowToRender) {\n          renderedRows.push(rowWithFocusedCell);\n        } else {\n          renderedRows.unshift(rowWithFocusedCell);\n        }\n        apiRef.current.calculateColSpan({\n          rowId: rowWithFocusedCell.id,\n          minFirstColumn: minFirstColumn,\n          maxLastColumn: maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    var _getRenderableIndexes11 = getRenderableIndexes({\n        firstIndex: nextRenderContext.firstColumnIndex,\n        lastIndex: nextRenderContext.lastColumnIndex,\n        minFirstIndex: minFirstColumn,\n        maxLastIndex: maxLastColumn,\n        buffer: columnBuffer\n      }),\n      _getRenderableIndexes12 = _slicedToArray(_getRenderableIndexes11, 2),\n      initialFirstColumnToRender = _getRenderableIndexes12[0],\n      lastColumnToRender = _getRenderableIndexes12[1];\n    var firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef: apiRef,\n      firstRowToRender: firstRowToRender,\n      lastRowToRender: lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    var isColumnWihFocusedCellNotInRange = false;\n    if (firstColumnToRender > indexOfColumnWithFocusedCell || lastColumnToRender < indexOfColumnWithFocusedCell) {\n      isColumnWihFocusedCellNotInRange = true;\n    }\n    var _getRenderedColumnsRe = getRenderedColumnsRef.current(visibleColumns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, isColumnWihFocusedCellNotInRange ? indexOfColumnWithFocusedCell : -1),\n      focusedCellColumnIndexNotInRange = _getRenderedColumnsRe.focusedCellColumnIndexNotInRange,\n      renderedColumns = _getRenderedColumnsRe.renderedColumns;\n    var _ref = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.row) || {},\n      rootRowStyle = _ref.style,\n      rootRowProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n    var invalidatesCachedRowStyle = prevGetRowProps.current !== getRowProps || prevRootRowStyle.current !== rootRowStyle;\n    if (invalidatesCachedRowStyle) {\n      rowStyleCache.current = Object.create(null);\n    }\n    var rows = [];\n    for (var _i = 0; _i < renderedRows.length; _i += 1) {\n      var _currentPage$range5;\n      var _renderedRows$_i = renderedRows[_i],\n        id = _renderedRows$_i.id,\n        model = _renderedRows$_i.model;\n      var isRowNotVisible = isRowWithFocusedCellNotInRange && cellFocus.id === id;\n      var lastVisibleRowIndex = isRowWithFocusedCellNotInRange ? firstRowToRender + _i === currentPage.rows.length : firstRowToRender + _i === currentPage.rows.length - 1;\n      var baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      var isSelected = void 0;\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n      if (onRowRender) {\n        onRowRender(id);\n      }\n      var focusedCell = cellFocus !== null && cellFocus.id === id ? cellFocus.field : null;\n      var columnWithFocusedCellNotInRange = focusedCellColumnIndexNotInRange !== undefined && visibleColumns[focusedCellColumnIndexNotInRange];\n      var renderedColumnsWithFocusedCell = columnWithFocusedCellNotInRange && focusedCell ? [columnWithFocusedCellNotInRange].concat(_toConsumableArray(renderedColumns)) : renderedColumns;\n      var tabbableCell = null;\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\n        var cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\n      }\n      var _ref2 = typeof getRowProps === 'function' && getRowProps(id, model) || {},\n        rowStyle = _ref2.style,\n        rowProps = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n      if (!rowStyleCache.current[id]) {\n        var style = _extends({}, rowStyle, rootRowStyle);\n        rowStyleCache.current[id] = style;\n      }\n      rows.push( /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: model,\n        rowId: id,\n        focusedCellColumnIndexNotInRange: focusedCellColumnIndexNotInRange,\n        isNotVisible: isRowNotVisible,\n        rowHeight: baseRowHeight,\n        focusedCell: focusedCell,\n        tabbableCell: tabbableCell,\n        renderedColumns: renderedColumnsWithFocusedCell,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null || (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + _i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, rowProps, rootRowProps, {\n        hovered: hoveredRowId === id,\n        style: rowStyleCache.current[id]\n      }), id));\n    }\n    prevGetRowProps.current = getRowProps;\n    prevRootRowStyle.current = rootRowStyle;\n    return rows;\n  };\n  var needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth >= containerDimensions.width;\n  var contentSize = React.useMemo(function () {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    var height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    var shouldExtendContent = false;\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n    var size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height: height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = getMinimalContentHeight(apiRef, rootProps.rowHeight); // Give room to show the overlay when there no rows.\n    }\n\n    return size;\n  }, [apiRef, rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, needsHorizontalScrollbar, rootProps.autoHeight, rootProps.rowHeight, currentPage.rows.length]);\n  React.useEffect(function () {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n  var rootStyle = React.useMemo(function () {\n    var style = {};\n    if (!needsHorizontalScrollbar) {\n      style.overflowX = 'hidden';\n    }\n    if (rootProps.autoHeight) {\n      style.overflowY = 'hidden';\n    }\n    return style;\n  }, [needsHorizontalScrollbar, rootProps.autoHeight]);\n  apiRef.current.register('private', {\n    getRenderContext: getRenderContext\n  });\n  return {\n    renderContext: renderContext,\n    updateRenderZonePosition: updateRenderZonePosition,\n    getRows: getRows,\n    getRootProps: function getRootProps() {\n      var inputProps = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return _extends({\n        ref: handleRef,\n        onScroll: handleScroll,\n        onWheel: handleWheel,\n        onTouchMove: handleTouchMove\n      }, inputProps, {\n        style: inputProps.style ? _extends({}, inputProps.style, rootStyle) : rootStyle,\n        role: 'presentation'\n      });\n    },\n    getContentProps: function getContentProps() {\n      var _ref4 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        style = _ref4.style;\n      return {\n        style: style ? _extends({}, style, contentSize) : contentSize,\n        role: 'presentation'\n      };\n    },\n    getRenderZoneProps: function getRenderZoneProps() {\n      return {\n        ref: renderZoneRef,\n        role: 'rowgroup'\n      };\n    }\n  };\n};","map":{"version":3,"names":["_extends","_objectWithoutPropertiesLoose","_excluded","_excluded2","React","ReactDOM","unstable_useForkRef","useForkRef","unstable_useEnhancedEffect","useEnhancedEffect","unstable_useEventCallback","useEventCallback","useTheme","defaultMemoize","useGridPrivateApiContext","useGridRootProps","useGridSelector","gridVisibleColumnDefinitionsSelector","gridColumnsTotalWidthSelector","gridColumnPositionsSelector","gridFocusCellSelector","gridTabIndexCellSelector","useGridVisibleRows","useGridApiEventHandler","clamp","selectedIdsLookupSelector","gridRowsMetaSelector","getFirstNonSpannedColumnToRender","getMinimalContentHeight","gridVirtualizationEnabledSelector","gridVirtualizationColumnEnabledSelector","jsx","_jsx","binarySearch","offset","positions","sliceStart","arguments","length","undefined","sliceEnd","pivot","Math","floor","itemOffset","exponentialSearch","index","interval","abs","min","getRenderableIndexes","_ref3","firstIndex","lastIndex","buffer","minFirstIndex","maxLastIndex","areRenderContextsEqual","context1","context2","firstRowIndex","lastRowIndex","firstColumnIndex","lastColumnIndex","MEMOIZE_OPTIONS","maxSize","useGridVirtualScroller","props","_currentPage$range3","_currentPage$range4","apiRef","rootProps","visibleColumns","enabled","enabledForColumns","ref","onRenderZonePositioning","_props$renderZoneMinC","renderZoneMinColumnIndex","_props$renderZoneMaxC","renderZoneMaxColumnIndex","getRowProps","theme","columnPositions","columnsTotalWidth","cellFocus","cellTabIndex","rowsMeta","selectedRowsLookup","currentPage","renderZoneRef","useRef","rootRef","handleRef","_React$useState","useState","_React$useState2","_slicedToArray","renderContext","setRenderContextState","prevRenderContext","scrollPosition","top","left","_React$useState3","width","height","_React$useState4","containerDimensions","setContainerDimensions","prevTotalWidth","_React$useState5","_React$useState6","hoveredRowId","setHoveredRowId","rowStyleCache","Object","create","prevGetRowProps","prevRootRowStyle","getRenderedColumnsRef","columns","firstColumnToRender","lastColumnToRender","minFirstColumn","maxLastColumn","indexOfColumnWithFocusedCell","focusedCellColumnIndexNotInRange","renderedColumns","slice","useMemo","findIndex","column","field","getNearestIndexToRender","useCallback","_currentPage$range","_currentPage$range2","lastMeasuredIndexRelativeToAllRows","current","getLastMeasuredRowIndex","allRowsMeasured","Infinity","range","lastMeasuredIndexRelativeToCurrentPage","computeRenderContext","rows","_scrollPosition$curre","autoHeight","hasRowWithAutoHeight","_getRenderableIndexes","rowBuffer","_getRenderableIndexes2","firstRowToRender","lastRowToRender","i","row","rowHasAutoHeight","id","scrollLeft","scrollTop","style","transform","clientWidth","clientHeight","currentPageTotalHeight","handleResize","updateRenderZonePosition","nextRenderContext","_getRenderableIndexes3","_getRenderableIndexes4","_getRenderableIndexes5","columnBuffer","_getRenderableIndexes6","initialFirstColumnToRender","visibleRows","direction","state","concat","getRenderContext","setRenderContext","_getRenderableIndexes7","_getRenderableIndexes8","publishEvent","initialRenderContext","_scrollPosition$curre2","params","handleScroll","event","_event$currentTarget","currentTarget","topRowsScrolledSincePreviousRender","bottomRowsScrolledSincePreviousRender","topColumnsScrolledSincePreviousRender","bottomColumnsScrolledSincePreviousRender","shouldSetState","rowThreshold","columnThreshold","flushSync","handleWheel","handleTouchMove","indexOfRowWithFocusedCell","_params$id","contains","relatedTarget","getRows","_rootProps$slotProps","onRowRender","_params$minFirstColum","_params$maxLastColumn","_params$availableSpac","availableSpace","_params$rowIndexOffse","rowIndexOffset","_params$position","position","_getRenderableIndexes9","_getRenderableIndexes10","renderedRows","forEach","push","calculateColSpan","rowId","isRowWithFocusedCellNotInRange","rowWithFocusedCell","unshift","_getRenderableIndexes11","_getRenderableIndexes12","isColumnWihFocusedCellNotInRange","_getRenderedColumnsRe","_ref","slotProps","rootRowStyle","rootRowProps","invalidatesCachedRowStyle","_currentPage$range5","_renderedRows$_i","model","isRowNotVisible","lastVisibleRowIndex","baseRowHeight","unstable_getRowHeight","isSelected","isRowSelectable","focusedCell","columnWithFocusedCellNotInRange","renderedColumnsWithFocusedCell","_toConsumableArray","tabbableCell","cellParams","getCellParams","cellMode","_ref2","rowStyle","rowProps","slots","isNotVisible","rowHeight","selected","containerWidth","isLastVisible","hovered","needsHorizontalScrollbar","contentSize","max","shouldExtendContent","size","minHeight","useEffect","rootStyle","overflowX","overflowY","register","getRootProps","inputProps","onScroll","onWheel","onTouchMove","role","getContentProps","_ref4","getRenderZoneProps"],"sources":["/home/mnck/MNCK/Programmes/Semestre5/DevAppN-T/appli_codes/Repos/Lab14/carfront/node_modules/@mui/x-data-grid/hooks/features/virtualization/useGridVirtualScroller.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nconst _excluded = [\"style\"],\n  _excluded2 = [\"style\"];\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { unstable_useForkRef as useForkRef, unstable_useEnhancedEffect as useEnhancedEffect, unstable_useEventCallback as useEventCallback } from '@mui/utils';\nimport { useTheme } from '@mui/material/styles';\nimport { defaultMemoize } from 'reselect';\nimport { useGridPrivateApiContext } from '../../utils/useGridPrivateApiContext';\nimport { useGridRootProps } from '../../utils/useGridRootProps';\nimport { useGridSelector } from '../../utils/useGridSelector';\nimport { gridVisibleColumnDefinitionsSelector, gridColumnsTotalWidthSelector, gridColumnPositionsSelector } from '../columns/gridColumnsSelector';\nimport { gridFocusCellSelector, gridTabIndexCellSelector } from '../focus/gridFocusStateSelector';\nimport { useGridVisibleRows } from '../../utils/useGridVisibleRows';\nimport { useGridApiEventHandler } from '../../utils/useGridApiEventHandler';\nimport { clamp } from '../../../utils/utils';\nimport { selectedIdsLookupSelector } from '../rowSelection/gridRowSelectionSelector';\nimport { gridRowsMetaSelector } from '../rows/gridRowsMetaSelector';\nimport { getFirstNonSpannedColumnToRender } from '../columns/gridColumnsUtils';\nimport { getMinimalContentHeight } from '../rows/gridRowsUtils';\nimport { gridVirtualizationEnabledSelector, gridVirtualizationColumnEnabledSelector } from './gridVirtualizationSelectors';\n\n// Uses binary search to avoid looping through all possible positions\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport function binarySearch(offset, positions, sliceStart = 0, sliceEnd = positions.length) {\n  if (positions.length <= 0) {\n    return -1;\n  }\n  if (sliceStart >= sliceEnd) {\n    return sliceStart;\n  }\n  const pivot = sliceStart + Math.floor((sliceEnd - sliceStart) / 2);\n  const itemOffset = positions[pivot];\n  return offset <= itemOffset ? binarySearch(offset, positions, sliceStart, pivot) : binarySearch(offset, positions, pivot + 1, sliceEnd);\n}\nfunction exponentialSearch(offset, positions, index) {\n  let interval = 1;\n  while (index < positions.length && Math.abs(positions[index]) < offset) {\n    index += interval;\n    interval *= 2;\n  }\n  return binarySearch(offset, positions, Math.floor(index / 2), Math.min(index, positions.length));\n}\nexport const getRenderableIndexes = ({\n  firstIndex,\n  lastIndex,\n  buffer,\n  minFirstIndex,\n  maxLastIndex\n}) => {\n  return [clamp(firstIndex - buffer, minFirstIndex, maxLastIndex), clamp(lastIndex + buffer, minFirstIndex, maxLastIndex)];\n};\nexport const areRenderContextsEqual = (context1, context2) => {\n  if (context1 === context2) {\n    return true;\n  }\n  return context1.firstRowIndex === context2.firstRowIndex && context1.lastRowIndex === context2.lastRowIndex && context1.firstColumnIndex === context2.firstColumnIndex && context1.lastColumnIndex === context2.lastColumnIndex;\n};\n// The `maxSize` is 3 so that reselect caches the `renderedColumns` values for the pinned left,\n// unpinned, and pinned right sections.\nconst MEMOIZE_OPTIONS = {\n  maxSize: 3\n};\nexport const useGridVirtualScroller = props => {\n  var _currentPage$range3, _currentPage$range4;\n  const apiRef = useGridPrivateApiContext();\n  const rootProps = useGridRootProps();\n  const visibleColumns = useGridSelector(apiRef, gridVisibleColumnDefinitionsSelector);\n  const enabled = useGridSelector(apiRef, gridVirtualizationEnabledSelector);\n  const enabledForColumns = useGridSelector(apiRef, gridVirtualizationColumnEnabledSelector);\n  const {\n    ref,\n    onRenderZonePositioning,\n    renderZoneMinColumnIndex = 0,\n    renderZoneMaxColumnIndex = visibleColumns.length,\n    getRowProps\n  } = props;\n  const theme = useTheme();\n  const columnPositions = useGridSelector(apiRef, gridColumnPositionsSelector);\n  const columnsTotalWidth = useGridSelector(apiRef, gridColumnsTotalWidthSelector);\n  const cellFocus = useGridSelector(apiRef, gridFocusCellSelector);\n  const cellTabIndex = useGridSelector(apiRef, gridTabIndexCellSelector);\n  const rowsMeta = useGridSelector(apiRef, gridRowsMetaSelector);\n  const selectedRowsLookup = useGridSelector(apiRef, selectedIdsLookupSelector);\n  const currentPage = useGridVisibleRows(apiRef, rootProps);\n  const renderZoneRef = React.useRef(null);\n  const rootRef = React.useRef(null);\n  const handleRef = useForkRef(ref, rootRef);\n  const [renderContext, setRenderContextState] = React.useState(null);\n  const prevRenderContext = React.useRef(renderContext);\n  const scrollPosition = React.useRef({\n    top: 0,\n    left: 0\n  });\n  const [containerDimensions, setContainerDimensions] = React.useState({\n    width: null,\n    height: null\n  });\n  const prevTotalWidth = React.useRef(columnsTotalWidth);\n  // Each visible row (not to be confused with a filter result) is composed of a central row element\n  // and up to two additional row elements for pinned columns (left and right).\n  // When hovering any of these elements, the :hover styles are applied only to the row element that\n  // was actually hovered, not its additional siblings. To make it look like a contiguous row,\n  // we add/remove the .Mui-hovered class to all of the row elements inside one visible row.\n  const [hoveredRowId, setHoveredRowId] = React.useState(null);\n  const rowStyleCache = React.useRef(Object.create(null));\n  const prevGetRowProps = React.useRef();\n  const prevRootRowStyle = React.useRef();\n  const getRenderedColumnsRef = React.useRef(defaultMemoize((columns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, indexOfColumnWithFocusedCell) => {\n    // If the selected column is not within the current range of columns being displayed,\n    // we need to render it at either the left or right of the columns,\n    // depending on whether it is above or below the range.\n    let focusedCellColumnIndexNotInRange;\n    const renderedColumns = columns.slice(firstColumnToRender, lastColumnToRender);\n    if (indexOfColumnWithFocusedCell > -1) {\n      // check if it is not on the left pinned column.\n      if (firstColumnToRender > indexOfColumnWithFocusedCell && indexOfColumnWithFocusedCell >= minFirstColumn) {\n        focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell;\n      }\n      // check if it is not on the right pinned column.\n      else if (lastColumnToRender < indexOfColumnWithFocusedCell && indexOfColumnWithFocusedCell < maxLastColumn) {\n        focusedCellColumnIndexNotInRange = indexOfColumnWithFocusedCell;\n      }\n    }\n    return {\n      focusedCellColumnIndexNotInRange,\n      renderedColumns\n    };\n  }, MEMOIZE_OPTIONS));\n  const indexOfColumnWithFocusedCell = React.useMemo(() => {\n    if (cellFocus !== null) {\n      return visibleColumns.findIndex(column => column.field === cellFocus.field);\n    }\n    return -1;\n  }, [cellFocus, visibleColumns]);\n  const getNearestIndexToRender = React.useCallback(offset => {\n    var _currentPage$range, _currentPage$range2;\n    const lastMeasuredIndexRelativeToAllRows = apiRef.current.getLastMeasuredRowIndex();\n    let allRowsMeasured = lastMeasuredIndexRelativeToAllRows === Infinity;\n    if ((_currentPage$range = currentPage.range) != null && _currentPage$range.lastRowIndex && !allRowsMeasured) {\n      // Check if all rows in this page are already measured\n      allRowsMeasured = lastMeasuredIndexRelativeToAllRows >= currentPage.range.lastRowIndex;\n    }\n    const lastMeasuredIndexRelativeToCurrentPage = clamp(lastMeasuredIndexRelativeToAllRows - (((_currentPage$range2 = currentPage.range) == null ? void 0 : _currentPage$range2.firstRowIndex) || 0), 0, rowsMeta.positions.length);\n    if (allRowsMeasured || rowsMeta.positions[lastMeasuredIndexRelativeToCurrentPage] >= offset) {\n      // If all rows were measured (when no row has \"auto\" as height) or all rows before the offset\n      // were measured, then use a binary search because it's faster.\n      return binarySearch(offset, rowsMeta.positions);\n    }\n\n    // Otherwise, use an exponential search.\n    // If rows have \"auto\" as height, their positions will be based on estimated heights.\n    // In this case, we can skip several steps until we find a position higher than the offset.\n    // Inspired by https://github.com/bvaughn/react-virtualized/blob/master/source/Grid/utils/CellSizeAndPositionManager.js\n    return exponentialSearch(offset, rowsMeta.positions, lastMeasuredIndexRelativeToCurrentPage);\n  }, [apiRef, (_currentPage$range3 = currentPage.range) == null ? void 0 : _currentPage$range3.firstRowIndex, (_currentPage$range4 = currentPage.range) == null ? void 0 : _currentPage$range4.lastRowIndex, rowsMeta.positions]);\n  const computeRenderContext = React.useCallback(() => {\n    if (!enabled) {\n      return {\n        firstRowIndex: 0,\n        lastRowIndex: currentPage.rows.length,\n        firstColumnIndex: 0,\n        lastColumnIndex: visibleColumns.length\n      };\n    }\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n\n    // Clamp the value because the search may return an index out of bounds.\n    // In the last index, this is not needed because Array.slice doesn't include it.\n    const firstRowIndex = Math.min(getNearestIndexToRender(top), rowsMeta.positions.length - 1);\n    const lastRowIndex = rootProps.autoHeight ? firstRowIndex + currentPage.rows.length : getNearestIndexToRender(top + containerDimensions.height);\n    let firstColumnIndex = 0;\n    let lastColumnIndex = columnPositions.length;\n    if (enabledForColumns) {\n      let hasRowWithAutoHeight = false;\n      const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n        firstIndex: firstRowIndex,\n        lastIndex: lastRowIndex,\n        minFirstIndex: 0,\n        maxLastIndex: currentPage.rows.length,\n        buffer: rootProps.rowBuffer\n      });\n      for (let i = firstRowToRender; i < lastRowToRender && !hasRowWithAutoHeight; i += 1) {\n        const row = currentPage.rows[i];\n        hasRowWithAutoHeight = apiRef.current.rowHasAutoHeight(row.id);\n      }\n      if (!hasRowWithAutoHeight) {\n        firstColumnIndex = binarySearch(Math.abs(left), columnPositions);\n        lastColumnIndex = binarySearch(Math.abs(left) + containerDimensions.width, columnPositions);\n      }\n    }\n    return {\n      firstRowIndex,\n      lastRowIndex,\n      firstColumnIndex,\n      lastColumnIndex\n    };\n  }, [enabled, enabledForColumns, getNearestIndexToRender, rowsMeta.positions.length, rootProps.autoHeight, rootProps.rowBuffer, currentPage.rows, columnPositions, visibleColumns.length, apiRef, containerDimensions]);\n  useEnhancedEffect(() => {\n    if (enabled) {\n      // TODO a scroll reset should not be necessary\n      rootRef.current.scrollLeft = 0;\n      rootRef.current.scrollTop = 0;\n    } else {\n      renderZoneRef.current.style.transform = `translate3d(0px, 0px, 0px)`;\n    }\n  }, [enabled]);\n  useEnhancedEffect(() => {\n    setContainerDimensions({\n      width: rootRef.current.clientWidth,\n      height: rootRef.current.clientHeight\n    });\n  }, [rowsMeta.currentPageTotalHeight]);\n  const handleResize = React.useCallback(() => {\n    if (rootRef.current) {\n      setContainerDimensions({\n        width: rootRef.current.clientWidth,\n        height: rootRef.current.clientHeight\n      });\n    }\n  }, []);\n  useGridApiEventHandler(apiRef, 'debouncedResize', handleResize);\n  const updateRenderZonePosition = React.useCallback(nextRenderContext => {\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    const [initialFirstColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: renderZoneMinColumnIndex,\n      maxLastIndex: renderZoneMaxColumnIndex,\n      buffer: rootProps.columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    const direction = theme.direction === 'ltr' ? 1 : -1;\n    const top = gridRowsMetaSelector(apiRef.current.state).positions[firstRowToRender];\n    const left = direction * gridColumnPositionsSelector(apiRef)[firstColumnToRender]; // Call directly the selector because it might be outdated when this method is called\n    renderZoneRef.current.style.transform = `translate3d(${left}px, ${top}px, 0px)`;\n    if (typeof onRenderZonePositioning === 'function') {\n      onRenderZonePositioning({\n        top,\n        left\n      });\n    }\n  }, [apiRef, currentPage.rows, onRenderZonePositioning, renderZoneMinColumnIndex, renderZoneMaxColumnIndex, rootProps.columnBuffer, rootProps.rowBuffer, theme.direction]);\n  const getRenderContext = React.useCallback(() => prevRenderContext.current, []);\n  const setRenderContext = React.useCallback(nextRenderContext => {\n    if (prevRenderContext.current && areRenderContextsEqual(nextRenderContext, prevRenderContext.current)) {\n      updateRenderZonePosition(nextRenderContext);\n      return;\n    }\n    setRenderContextState(nextRenderContext);\n    updateRenderZonePosition(nextRenderContext);\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rootProps.rowBuffer\n    });\n    apiRef.current.publishEvent('renderedRowsIntervalChange', {\n      firstRowToRender,\n      lastRowToRender\n    });\n    prevRenderContext.current = nextRenderContext;\n  }, [apiRef, setRenderContextState, prevRenderContext, currentPage.rows.length, rootProps.rowBuffer, updateRenderZonePosition]);\n  useEnhancedEffect(() => {\n    if (containerDimensions.width == null) {\n      return;\n    }\n    const initialRenderContext = computeRenderContext();\n    setRenderContext(initialRenderContext);\n    const {\n      top,\n      left\n    } = scrollPosition.current;\n    const params = {\n      top,\n      left,\n      renderContext: initialRenderContext\n    };\n    apiRef.current.publishEvent('scrollPositionChange', params);\n  }, [apiRef, computeRenderContext, containerDimensions.width, setRenderContext]);\n  const handleScroll = useEventCallback(event => {\n    const {\n      scrollTop,\n      scrollLeft\n    } = event.currentTarget;\n    scrollPosition.current.top = scrollTop;\n    scrollPosition.current.left = scrollLeft;\n\n    // On iOS and macOS, negative offsets are possible when swiping past the start\n    if (!prevRenderContext.current || scrollTop < 0) {\n      return;\n    }\n    if (theme.direction === 'ltr') {\n      if (scrollLeft < 0) {\n        return;\n      }\n    }\n    if (theme.direction === 'rtl') {\n      if (scrollLeft > 0) {\n        return;\n      }\n    }\n\n    // When virtualization is disabled, the context never changes during scroll\n    const nextRenderContext = enabled ? computeRenderContext() : prevRenderContext.current;\n    const topRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstRowIndex - prevRenderContext.current.firstRowIndex);\n    const bottomRowsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastRowIndex - prevRenderContext.current.lastRowIndex);\n    const topColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.firstColumnIndex - prevRenderContext.current.firstColumnIndex);\n    const bottomColumnsScrolledSincePreviousRender = Math.abs(nextRenderContext.lastColumnIndex - prevRenderContext.current.lastColumnIndex);\n    const shouldSetState = topRowsScrolledSincePreviousRender >= rootProps.rowThreshold || bottomRowsScrolledSincePreviousRender >= rootProps.rowThreshold || topColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || bottomColumnsScrolledSincePreviousRender >= rootProps.columnThreshold || prevTotalWidth.current !== columnsTotalWidth;\n    apiRef.current.publishEvent('scrollPositionChange', {\n      top: scrollTop,\n      left: scrollLeft,\n      renderContext: shouldSetState ? nextRenderContext : prevRenderContext.current\n    }, event);\n    if (shouldSetState) {\n      // Prevents batching render context changes\n      ReactDOM.flushSync(() => {\n        setRenderContext(nextRenderContext);\n      });\n      prevTotalWidth.current = columnsTotalWidth;\n    }\n  });\n  const handleWheel = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerWheel', {}, event);\n  });\n  const handleTouchMove = useEventCallback(event => {\n    apiRef.current.publishEvent('virtualScrollerTouchMove', {}, event);\n  });\n  const indexOfRowWithFocusedCell = React.useMemo(() => {\n    if (cellFocus !== null) {\n      return currentPage.rows.findIndex(row => row.id === cellFocus.id);\n    }\n    return -1;\n  }, [cellFocus, currentPage.rows]);\n  useGridApiEventHandler(apiRef, 'rowMouseOver', (params, event) => {\n    var _params$id;\n    if (event.currentTarget.contains(event.relatedTarget)) {\n      return;\n    }\n    setHoveredRowId((_params$id = params.id) != null ? _params$id : null);\n  });\n  useGridApiEventHandler(apiRef, 'rowMouseOut', (params, event) => {\n    if (event.currentTarget.contains(event.relatedTarget)) {\n      return;\n    }\n    setHoveredRowId(null);\n  });\n  const getRows = (params = {\n    renderContext\n  }) => {\n    var _rootProps$slotProps;\n    const {\n      onRowRender,\n      renderContext: nextRenderContext,\n      minFirstColumn = renderZoneMinColumnIndex,\n      maxLastColumn = renderZoneMaxColumnIndex,\n      availableSpace = containerDimensions.width,\n      rowIndexOffset = 0,\n      position = 'center'\n    } = params;\n    if (!nextRenderContext || availableSpace == null) {\n      return null;\n    }\n    const rowBuffer = enabled ? rootProps.rowBuffer : 0;\n    const columnBuffer = enabled ? rootProps.columnBuffer : 0;\n    const [firstRowToRender, lastRowToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstRowIndex,\n      lastIndex: nextRenderContext.lastRowIndex,\n      minFirstIndex: 0,\n      maxLastIndex: currentPage.rows.length,\n      buffer: rowBuffer\n    });\n    const renderedRows = [];\n    if (params.rows) {\n      params.rows.forEach(row => {\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      });\n    } else {\n      if (!currentPage.range) {\n        return null;\n      }\n      for (let i = firstRowToRender; i < lastRowToRender; i += 1) {\n        const row = currentPage.rows[i];\n        renderedRows.push(row);\n        apiRef.current.calculateColSpan({\n          rowId: row.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    // If the selected row is not within the current range of rows being displayed,\n    // we need to render it at either the top or bottom of the rows,\n    // depending on whether it is above or below the range.\n\n    let isRowWithFocusedCellNotInRange = false;\n    if (indexOfRowWithFocusedCell > -1) {\n      const rowWithFocusedCell = currentPage.rows[indexOfRowWithFocusedCell];\n      if (firstRowToRender > indexOfRowWithFocusedCell || lastRowToRender < indexOfRowWithFocusedCell) {\n        isRowWithFocusedCellNotInRange = true;\n        if (indexOfRowWithFocusedCell > firstRowToRender) {\n          renderedRows.push(rowWithFocusedCell);\n        } else {\n          renderedRows.unshift(rowWithFocusedCell);\n        }\n        apiRef.current.calculateColSpan({\n          rowId: rowWithFocusedCell.id,\n          minFirstColumn,\n          maxLastColumn,\n          columns: visibleColumns\n        });\n      }\n    }\n    const [initialFirstColumnToRender, lastColumnToRender] = getRenderableIndexes({\n      firstIndex: nextRenderContext.firstColumnIndex,\n      lastIndex: nextRenderContext.lastColumnIndex,\n      minFirstIndex: minFirstColumn,\n      maxLastIndex: maxLastColumn,\n      buffer: columnBuffer\n    });\n    const firstColumnToRender = getFirstNonSpannedColumnToRender({\n      firstColumnToRender: initialFirstColumnToRender,\n      apiRef,\n      firstRowToRender,\n      lastRowToRender,\n      visibleRows: currentPage.rows\n    });\n    let isColumnWihFocusedCellNotInRange = false;\n    if (firstColumnToRender > indexOfColumnWithFocusedCell || lastColumnToRender < indexOfColumnWithFocusedCell) {\n      isColumnWihFocusedCellNotInRange = true;\n    }\n    const {\n      focusedCellColumnIndexNotInRange,\n      renderedColumns\n    } = getRenderedColumnsRef.current(visibleColumns, firstColumnToRender, lastColumnToRender, minFirstColumn, maxLastColumn, isColumnWihFocusedCellNotInRange ? indexOfColumnWithFocusedCell : -1);\n    const _ref = ((_rootProps$slotProps = rootProps.slotProps) == null ? void 0 : _rootProps$slotProps.row) || {},\n      {\n        style: rootRowStyle\n      } = _ref,\n      rootRowProps = _objectWithoutPropertiesLoose(_ref, _excluded);\n    const invalidatesCachedRowStyle = prevGetRowProps.current !== getRowProps || prevRootRowStyle.current !== rootRowStyle;\n    if (invalidatesCachedRowStyle) {\n      rowStyleCache.current = Object.create(null);\n    }\n    const rows = [];\n    for (let i = 0; i < renderedRows.length; i += 1) {\n      var _currentPage$range5;\n      const {\n        id,\n        model\n      } = renderedRows[i];\n      const isRowNotVisible = isRowWithFocusedCellNotInRange && cellFocus.id === id;\n      const lastVisibleRowIndex = isRowWithFocusedCellNotInRange ? firstRowToRender + i === currentPage.rows.length : firstRowToRender + i === currentPage.rows.length - 1;\n      const baseRowHeight = !apiRef.current.rowHasAutoHeight(id) ? apiRef.current.unstable_getRowHeight(id) : 'auto';\n      let isSelected;\n      if (selectedRowsLookup[id] == null) {\n        isSelected = false;\n      } else {\n        isSelected = apiRef.current.isRowSelectable(id);\n      }\n      if (onRowRender) {\n        onRowRender(id);\n      }\n      const focusedCell = cellFocus !== null && cellFocus.id === id ? cellFocus.field : null;\n      const columnWithFocusedCellNotInRange = focusedCellColumnIndexNotInRange !== undefined && visibleColumns[focusedCellColumnIndexNotInRange];\n      const renderedColumnsWithFocusedCell = columnWithFocusedCellNotInRange && focusedCell ? [columnWithFocusedCellNotInRange, ...renderedColumns] : renderedColumns;\n      let tabbableCell = null;\n      if (cellTabIndex !== null && cellTabIndex.id === id) {\n        const cellParams = apiRef.current.getCellParams(id, cellTabIndex.field);\n        tabbableCell = cellParams.cellMode === 'view' ? cellTabIndex.field : null;\n      }\n      const _ref2 = typeof getRowProps === 'function' && getRowProps(id, model) || {},\n        {\n          style: rowStyle\n        } = _ref2,\n        rowProps = _objectWithoutPropertiesLoose(_ref2, _excluded2);\n      if (!rowStyleCache.current[id]) {\n        const style = _extends({}, rowStyle, rootRowStyle);\n        rowStyleCache.current[id] = style;\n      }\n      rows.push( /*#__PURE__*/_jsx(rootProps.slots.row, _extends({\n        row: model,\n        rowId: id,\n        focusedCellColumnIndexNotInRange: focusedCellColumnIndexNotInRange,\n        isNotVisible: isRowNotVisible,\n        rowHeight: baseRowHeight,\n        focusedCell: focusedCell,\n        tabbableCell: tabbableCell,\n        renderedColumns: renderedColumnsWithFocusedCell,\n        visibleColumns: visibleColumns,\n        firstColumnToRender: firstColumnToRender,\n        lastColumnToRender: lastColumnToRender,\n        selected: isSelected,\n        index: rowIndexOffset + ((currentPage == null || (_currentPage$range5 = currentPage.range) == null ? void 0 : _currentPage$range5.firstRowIndex) || 0) + firstRowToRender + i,\n        containerWidth: availableSpace,\n        isLastVisible: lastVisibleRowIndex,\n        position: position\n      }, rowProps, rootRowProps, {\n        hovered: hoveredRowId === id,\n        style: rowStyleCache.current[id]\n      }), id));\n    }\n    prevGetRowProps.current = getRowProps;\n    prevRootRowStyle.current = rootRowStyle;\n    return rows;\n  };\n  const needsHorizontalScrollbar = containerDimensions.width && columnsTotalWidth >= containerDimensions.width;\n  const contentSize = React.useMemo(() => {\n    // In cases where the columns exceed the available width,\n    // the horizontal scrollbar should be shown even when there're no rows.\n    // Keeping 1px as minimum height ensures that the scrollbar will visible if necessary.\n    const height = Math.max(rowsMeta.currentPageTotalHeight, 1);\n    let shouldExtendContent = false;\n    if (rootRef != null && rootRef.current && height <= (rootRef == null ? void 0 : rootRef.current.clientHeight)) {\n      shouldExtendContent = true;\n    }\n    const size = {\n      width: needsHorizontalScrollbar ? columnsTotalWidth : 'auto',\n      height,\n      minHeight: shouldExtendContent ? '100%' : 'auto'\n    };\n    if (rootProps.autoHeight && currentPage.rows.length === 0) {\n      size.height = getMinimalContentHeight(apiRef, rootProps.rowHeight); // Give room to show the overlay when there no rows.\n    }\n\n    return size;\n  }, [apiRef, rootRef, columnsTotalWidth, rowsMeta.currentPageTotalHeight, needsHorizontalScrollbar, rootProps.autoHeight, rootProps.rowHeight, currentPage.rows.length]);\n  React.useEffect(() => {\n    apiRef.current.publishEvent('virtualScrollerContentSizeChange');\n  }, [apiRef, contentSize]);\n  const rootStyle = React.useMemo(() => {\n    const style = {};\n    if (!needsHorizontalScrollbar) {\n      style.overflowX = 'hidden';\n    }\n    if (rootProps.autoHeight) {\n      style.overflowY = 'hidden';\n    }\n    return style;\n  }, [needsHorizontalScrollbar, rootProps.autoHeight]);\n  apiRef.current.register('private', {\n    getRenderContext\n  });\n  return {\n    renderContext,\n    updateRenderZonePosition,\n    getRows,\n    getRootProps: (inputProps = {}) => _extends({\n      ref: handleRef,\n      onScroll: handleScroll,\n      onWheel: handleWheel,\n      onTouchMove: handleTouchMove\n    }, inputProps, {\n      style: inputProps.style ? _extends({}, inputProps.style, rootStyle) : rootStyle,\n      role: 'presentation'\n    }),\n    getContentProps: ({\n      style\n    } = {}) => ({\n      style: style ? _extends({}, style, contentSize) : contentSize,\n      role: 'presentation'\n    }),\n    getRenderZoneProps: () => ({\n      ref: renderZoneRef,\n      role: 'rowgroup'\n    })\n  };\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}